[
{
	"uri": "https://QryptInc.github.io/eaas/",
	"title": "Quantum Entropy",
	"tags": [],
	"description": "",
	"content": "Using Qrypt\u0026rsquo;s Quantum Entropy Service Qrypt’s Entropy as a Service is a RESTful web service that allows you to generate random data (henceforth referred to as entropy or random) that is truly random—based on quantum-mechanical phenomena.\n Getting Started To start using Qrypt\u0026rsquo;s Quantum Entropy service you need to create a Qrypt account, obtain an access token, and submit an HTTP request.\nCreate a free Qrypt account To request entropy from the service, you must first create an account.\n Navigate to https://portal.qrypt.com and create a new account. Enter your email address and a strong password, then click the button to create your account. Check your email for the 4-digit account confirmation code and enter it on the website to confirm your account. When prompted, enter your first and last name.  Generate an access token An access token is required to submit REST API requests.\n Navigate to the Tokens page. Assign a name to the token to help you distinguish between different tokens. Select the expiration period. This determines when the token will expire and need to be replaced. Click the \u0026ldquo;Generate token\u0026rdquo; button. The generated token will be displayed along with an example of how entropy data can be requested. Copy the token using the “Copy” button and store it in a secure location. Important: This is the only time you will be able to view the access token. Be sure to copy and store it before closing this popup. Save the access token to a secure location. Because your access token is used to make requests for entropy—a budgeted resource—it should be treated as secure data, very much like a password.   Submit a request for entropy To get entropy from the service, you must submit an HTTP request to the REST API service, providing the aforementioned access token and specifying the number of 1,024-byte blocks of entropy you would like to receive. You must also specify an access token—which identifies the user account requesting the data—in an HTTP “authorization” header. The data is returned in a JSON-encoded structure containing an array of base64-encoded strings, each of which decodes to a 1,024-byte block of entropy, as well as an integer specifying the number of strings in the array.\nTo ensure the privacy of your access token and the entropy data, all calls are made using an encrypted HTTPS connection.\n Follow these steps in your preferred tool or language of choice to request entropy (see subsequent sections Request and Response for details):\n Specify your access token and the desired number of kibibytes (1,024 bytes) of entropy in a web request. Use the following URL: https://api-eus.qrypt.com/api/v1/quantum-entropy?size={kib_entropy}. Replace {kib_entropy} in the aforementioned URL with an integer indicating the number of kibibytes of entropy to return. Include an HTTP “Accept” header field with a value of “application/json”. Include an HTTP “Authorization” header with a value of “Bearer {access_token}”, where {access_token} is the access token obtained from the Qrypt portal. Submit the HTTP request using the HTTP GET method. If the HTTP request is successful, the JSON-formatted response will contain a structure containing two fields named “random” and “size”. The “random” field contains an array of base64-encoded strings (each of which—when decoded—contains 1,024 bytes of entropy). The “size” field contains the number of elements in the “random” field.  The following sections provide more detailed explanations of the request and response.\n Request The web service consists of one REST API call, which returns the entropy. The following table describes the properties of a valid REST API call.\n HTTP Verb GET   URL  https://api-eus.qrypt.com/api/v1/quantum-entropy?size={kib_entropy}{kib_entropy} is an integer that specifies the number of kibibytes (1,024 bytes) of entropy being requested. The minimum value is 1 and the maximum value is 512. If unspecified, the default value is one (1).    Accept\n(header) \"application/json\"   Authorization\n(header)  \"Bearer {qrypt_access_token}\" {qrypt_access_token} is an access token generated in the Qrypt portal.    Qrypt’s Quantum Entropy service is hosted in several locations worldwide. This allows you to access a server that is closer to the client for better reliability and response time. The following table (Table 2) indicates which subdomain to use in your URL to access the server located in the specified region.\n Subdomain Geographic location   api-eus  Eastern United States    api-weu  Western Europe     Response The response from the HTTP request will contain a numeric status code indicating whether or not the request succeeded and, if not, why. If successful, it will also return the entropy.\n Status code Description   200 Success\nEntropy was successfully returned.   400  Bad request\nThe request was invalid (i.e., malformed or otherwise unacceptable). Please verify the format of the URL and the specified parameters.    401  Unauthorized\nThe access token is either invalid or has expired.    403  Limit reached\nThe account associated with the specified access token has already retrieved the maximum allotment of entropy allowed for the current period. Please contact a Qrypt representative to request a change to your limit.    429  Rate Limit reached\nThe access token used to pull random has exceeded the maximum number of requests (30) allowed for the designated time interval (10 seconds). Please wait and try again.    500  Internal server error\nThe Qrypt service has encountered an internal error. Please contact Qrypt support for further assistance.    503  Not enough supply\nQrypt’s supply of entropy is temporarily insufficient to fulfill the request. Please wait and try the request again.    If a success status code of 200 was returned, the response contains a JSON-encoded structure containing an array size (which should match the kib_entropy value specified in the request) and an array of base64-encoded strings which, when decoded, contains 1,024 bytes of entropy.\n JSON Fields Description   random An array of base64-encoded strings (as defined in RFC 4648 §4, Base 64 Encoding) . The length of the array is specified in the size field (below). Each string, when decoded, contains a 1,024-byte sequence of entropy.   size The number of base64-encoded strings in the array returned in the random field (above).   The following illustrates an example of JSON output as returned by a request for two 1,024-byte blocks of entropy:\n\u0026quot;random\u0026quot;: [ \u0026quot;\u0026lt;base64 encoding of 1,024 bytes of entropy\u0026gt;\u0026quot;, \u0026quot;\u0026lt;base64 encoding of 1,024 bytes of entropy\u0026gt;\u0026quot; ], \u0026quot;size\u0026quot;: 2  Examples The following examples demonstrate how to submit a request and display the returned entropy. In the following examples, {subdomain} should be replaced with the subdomain for a server in the geographic location you would like to use (see Table 2), {kib_entropy} should be replaced with an integer between 1 and 512, and {qrypt_access_token} should be replaced with an access token generated using your Qrypt account.\nCurl The following shows an example of how to submit a request for {kib_entropy} kibibytes of entropy using the {qrypt_access_token} via the curl command-line command. This command can be executed at a Windows or Unix command prompt.\ncurl https://{subdomain}.qrypt.com/api/v1/quantum-entropy?size={kib_entropy} -H \u0026quot;Authorization: Bearer {qrypt_access_token}\u0026quot; PowerShell The following shows an example of how to submit a request for {kib_entropy} kibibytes of data using the {qrypt_access_token} in PowerShell.\nSpecify entropy token, requested size of entropy, and subdomain\n[string] $accesstoken = '{qrypt_access_token}' [int] $kibData = {kib_entropy} [string] $sub = '{subdomain}' Define the request URL\n[string] $url = \u0026quot;https://$sub.qrypt.com/api/v1/quantum-entropy?size=$kibData\u0026quot; Define and submit the request\n$response = Invoke-RestMethod -Method Get -Uri $url -UseBasicParsing `-Headers @{ authorization = \u0026quot;Bearer $accesstoken\u0026quot; } ` -ContentType 'application/json' Display the entropy bytes\nresponse.random | foreach { [Convert]::FromBase64String($_) } Python The following shows an example of how to submit a request for {kib_entropy} kibibytes of data using the {qrypt_access_token} in Python.\nYou may need to install the “requests” module before executing this example. For example, use the following command:\npython -m pip install requests  import requests import base64 # Specify entropy token, requeststed size of entropy, and subdomain accesstoken = \u0026#39;{qrypt_access_token}\u0026#39; kibData = {kib_entropy} sub = \u0026#39;{subdomain}\u0026#39; # Define the request URL url = f\u0026#39;https://{sub}.qrypt.com/api/v1/quantum-entropy\u0026#39; # Define and submit the request headers = { \u0026#39;Authorization\u0026#39;: f\u0026#39;Bearer {accesstoken}\u0026#39; } params = { \u0026#39;size\u0026#39;: kibData } response = requests.get( url, headers=headers, params=params) # Display the entropy bytes for s in response.json()[\u0026#39;random\u0026#39;]: for b in base64.decodebytes( s.encode(\u0026#39;ascii\u0026#39;) ): print( f\u0026#39;{b}\u0026#39;) JavaScript The following shows an example of how to submit a request for {kib_entropy} kibibytes of data using the {qrypt_access_token} in JavaScript.\n\u0026quot;use strict\u0026quot;; // Specify entropy token, requested size of entropy, and subdomain let accessToken = \u0026quot;{qrypt_access_token}\u0026quot;; let kibData = { kib_entropy }; let sub = \u0026quot;{subdomain}\u0026quot;; // Define the request URL let url = `https://${sub}.qrypt.com/api/v1/quantum-entropy?size=${kibData}`; // Submit the request and process the response fetch(url, { method: \u0026quot;GET\u0026quot;, headers: { Accept: \u0026quot;application/json\u0026quot;, Authorization: \u0026quot;Bearer \u0026quot; + accessToken, }, }) .then((response) =\u0026gt; response.json()) .then(function (json) { // Display the entropy bytes json.random.forEach((b64) =\u0026gt; [...atob(b64)].forEach((c) =\u0026gt; console.log(c.charCodeAt(0))) ); }); "
},
{
	"uri": "https://QryptInc.github.io/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Qrypt Documentation Our documentation is written by developers for developers. The goal is to make it as easy as possible for developers to use Qrypt to secure applications and infrastructure.\nWe believe that documentation benefits from sharing and collaborative improvement. Qrypt documentation is available on Github pages and we invite anybody to make changes or to create issues when there is content that needs to be improved.\nIntegrating with Qrypt Below is a list of the products that Qrypt offers with links to their supporting documentation.\nQuantum Entropy Qrypt\u0026rsquo;s Quantum Entropy service measures quantum effects and converts those measurements into pure random numbers. The service leverages multiple Quantum Random Number Generators (QRNGs) developed by national and international research labs to ensure the highest quality random.\nKey Generation Qrypt SDK includes client library SDKs, cloud-based REST services, command line clients and guidance to help integrate post-quantum security into your applications and services. You can add security features to your applications without being an expert in post-quantum cryptography.\n"
},
{
	"uri": "https://QryptInc.github.io/sdk/quickstarts/cpp/",
	"title": "Qrypt SDK for C++ Quickstarts",
	"tags": [],
	"description": "",
	"content": "The Qrypt SDK for C++ enables developers to add post-quantum security to their applications and services.\nCurrently we provide Distributed Key Generation.\nLibrary Compatibility The Qrypt SDK for C++ is built using the following compilers.\n   Platform Version Compiler CPU     Ubuntu 20.04 gcc 9.4.0 x64     Sample Code Find the finalized code for these quickstarts on GitHub.\n Prerequisites A Qrypt Account. Create an account for free.\n Quickstarts Distributed key generation Generate One-Time Pads Encrypt and decrypt using generated One-Time Pads   "
},
{
	"uri": "https://QryptInc.github.io/sdk/api/cpp/",
	"title": "Qrypt SDK for C++",
	"tags": [],
	"description": "",
	"content": "  "
},
{
	"uri": "https://QryptInc.github.io/sdk/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "Developers need familiar tools based on modern development practices. We provide an SDK that can be easily integrated into applications and infrastructure to make them quantum-secure.\nThe Qrypt SDK includes client library SDKs, cloud-based REST services, command line clients and guidance to help integrate post-quantum security into your applications and services. You can add security features to your applications without being an expert in post-quantum cryptography.\n Qrypt SDK for C++ Features  Distributed key generation  Library Compatibility The C++ SDK is built using the following compilers.\n   Platform Version Compiler CPU     Ubuntu 20.04 gcc 9.4.0 x64    "
},
{
	"uri": "https://QryptInc.github.io/concepts/key-generation-architecture/",
	"title": "Key Generation Architecture",
	"tags": [],
	"description": "",
	"content": "Key distribution based on asymmetric algorithms is a weak link for cryptography.\nQrypt is the only company that enables encryption without distributing encryption keys – also basing them on trusted quantum random numbers.\n The BLAST architecture enables generation of identical keys at multiple endpoints, so they are never distributed. Caches of random allow for sampling by multiple clients – with time and usage controls that trigger cache shredding. Client locally extracts keys from returned random – not even Qrypt can determine the keys. No dedicated channels or infrastructure required – unlike quantum key distribution (QKD).    Walk-through\n Client A determines the key generation requirements: BLAST servers to be used, the sampling seeds, and extraction parameters​ Clients share the key generation requirements – seeds, extraction parameters​. Each client independently samples BLAST APIs, assembling identical blocks of random on each client.​ Clients locally extracts keys - resulting in identical encryption keys which were never distributed​.   Attack scenarios required to compromise keys are extreme\n Attacker compromises the A to B channel and decrypts the key generation requirements before the server caches are shredded and can no longer be sampled. Even with a quantum computer the time to decrypt is too long Attacker compromises ALL aspects of the BLAST protocol, including TLS crypto​  Compromises ALL channels between a client and the N BLAST servers​ Compromises the A to B channel Defeat TLS cryptography used in A to B channel   Full control of Client A or Client B   "
},
{
	"uri": "https://QryptInc.github.io/sdk/",
	"title": "Key Generation",
	"tags": [],
	"description": "",
	"content": "Businesses need to protect against the future quantum threat, and never distribute encryption keys that can be intercepted. The Qrypt SDK allows you to generate identical keys at multiple endpoints.\nOverview Developers need familiar tools based on modern development practices. We provide an SDK that can be easily integrated into applications and infrastructure to make them quantum-secure.\nThe Qrypt SDK includes client library SDKs, cloud-based REST services, command line clients and guidance to help integrate post-quantum security into your applications and services. You can add security features to your applications without being an expert in post-quantum cryptography.\nQuickstarts Demo applications built using Qrypt\u0026rsquo;s tools.\nAPI Reference Detailed API References for a growing list of plaforms.\nChangelogs Release notes and updates\n"
},
{
	"uri": "https://QryptInc.github.io/sdk/quickstarts/",
	"title": "Quickstarts",
	"tags": [],
	"description": "",
	"content": "Use the Quickstarts to quickly get up and running with the Qrypt SDK.\nQrpyt SDK for C++ Quickstarts The Qrypt SDK for C++ enables developers to add post-quantum security to their applications and services.\n"
},
{
	"uri": "https://QryptInc.github.io/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "",
	"content": "Use the pages in this section to dig deeper into the post-quantum technologies Qrypt has to offer.\nKey Generation Architecture Architecture used to generate cryptographic keys for data encryption without distributing encryption keys.\nKey Entropy Size Understanding total entropy size using formula and examples\nOne-Time Pad (OTP) One-Time Pads are the only known information theoretically secure way to perform symmetric encryption. Qrypt is the first in the industry to offer a way to use OTP in a practical manner.\n"
},
{
	"uri": "https://QryptInc.github.io/concepts/entropy-projection/",
	"title": "Key Entropy Size",
	"tags": [],
	"description": "",
	"content": "Formula Total entropy size = (Number of keys) x (Entropy size per key)   Key Size (byte) Entropy Size Per Key (byte)   16 1,600 (1.56 KiB)   32 (size of an AES-256 key) 1,680 (1.64 KiB)   64 1,760 (1.72 KiB)   256 2,480 (2.42 KiB)   1,024 (1 KiB) 4,800 (4.69 KiB)   10,240 (10 KiB) 27,920 (27.27 KiB)   102,400 (100 KiB) 234,000 (228.52 KiB)   1,048,576 (1 MiB) 2,264,640 (2.16 MiB)   10,485,760 (10 MiB) 22,646,400 (21.6 MiB)   Example 1:\nTo generate (or to sync) 100 of AES-256 keys, the entropy size will be\n100 x 22,440 = 2,244,000 bytes = 2.1 MiB  Example 2:\nTo generate (or to sync) 100 of 256-byte OTP keys, the entropy size will be\n100 x 24,280 = 2,428,000 bytes = 2.3 MiB  Example 3:\nTo generate (or to sync) 100 of AES-256 keys and 200 of 256-byte OTP keys, the entropy size will be\n( 100 x 22,440 ) x ( 200 x 24,280 ) = 7,100,000 bytes = 6.8 MiB  Example 4:\n25 MiB entropy quota allows you to generate (or to sync)\n( 25 * 1024 * 1024 / 22,440 ) x ( 200 x 24,280 ) = 1168 of AES-256 keys in total  "
},
{
	"uri": "https://QryptInc.github.io/concepts/otp/",
	"title": "One-Time Pad (OTP)",
	"tags": [],
	"description": "",
	"content": "Our Technology Qrypt offers solutions to make One-Time Pads, the only known information theoretically secure symmetric encryption algorithm, finally practical in industry.\n What is classical cryptographic security? A cryptographic algorithm is considered secure, when the algorithm has been around for several years, and there is still no known method to “break” the algorithm with a classical computer.\nFor example, the widely used RSA algorithm has been around since 1977 with no significant progress made on a method to break it with a classical computer.\nWhat is post-quantum security? With the age of quantum computers being on the horizon, researchers have also explored methods to break cryptography using a quantum computer. Post-quantum cryptography means that after years of research, there is still no known method to “break” the cryptography, even given a quantum computer.\nFor example, RSA, would not satisfy post-quantum security because Shor’s algorithm, an attack using a quantum computer, was discovered to break RSA in 1994. On the other hand, AES-256 is considered post-quantum because no quantum attacks have been discovered since its publication in 1998.\n A One-Time Pad cipher is when a randomly chosen key, the same length of the plaintext, is XORed with the plaintext to produce the ciphertext. If the key is truly chosen randomly, all plaintexts of the given size are equally likely to have produced the ciphertext.\n What is information theoretic security? One-Time Pads have been mathematically proven to be information theoretically secure, meaning there is a mathematical proof that there exist no attacks (even with a computationally unbounded adversary) that can break a One-Time Pad. On the other hand, it is possible for a “post-quantum” algorithm to be broken, if in the future, someone were to discover a quantum attack on the algorithm.\n Why isn’t everyone using One-Time Pads? One-Time Pads are only secure if the key is truly random, and only recent quantum technology has made truly random keys possible.\nIn addition, One-Time Pads are only secure if the keys are never reused. This means we need to share a newly randomly generated key, which is the same size of the plaintext, every time we want to send a new plaintext message. This reduces the security of the One-Time Pad down to the security of the key exchange algorithm.\nBLAST Distributed Qrypt offers a novel key generation solution, which offers everlasting security.\nHow secure are key exchange algorithms?   Algorithms Level of Security Drawbacks   RSA, Diffie Hellman, ECDH Classical security   Not post-quantum     Classic McEliece, CRYSTALS-KYBER, FrodoKEM Post-quantum security   Not provably secure Slow/inefficient   Quantum Key Distribution (QKD): BB84, E91, B92 Information theoretically secure (dependent on accuracy of hardware)   Costly Range of communication is limited Tolerance for error in cryptographic security, however, is many order of magnitude smaller than in most physical engineering scenarios making it very difficult to validate     Qrypt solution Everlasting security (explained below)   Assumes the user has a secure channel with a user-configurable value g out of t Qrypt servers     What is everlasting security? A protocol which achieves everlasting security guarantees that an encryption is information theoretically secure, given that the initial key exchange of the seed S is not broken within a time T which we can choose (i.e. an hour). This means that an hour after the two parties exchange an initial seed S, even a computationally unbounded adversary (with access to both classical and quantum computers) cannot break the encryption.\nLevels of Security   Classical security that is vulnerable to quantum computers (i.e. RSA, ECDH)\n  Post quantum security that has no known algorithm that quantum computers could run to break (i.e. FrodoKEM, Crystals-Kyber)\n  For levels 1 and 2, to break the encryption, an adversary would need to:\n Harvest data between Alice and Bob Break the key exchange   3a) Everlasting security which is provably secure against an unbounded adversary after phase 1 (while the server is still accepting decryption requests), where:\n the seed key exchange has level 1 security in phase 1 we assume g out of T servers have secure, authenticated channels with the client (where these channels use TLS)  3b) Everlasting security which is provably secure against an unbounded adversary after phase 1 (while the server is still accepting decryption requests), where:\n the seed key exchange has level 2 security in phase 1 we assume g out of T servers have secure, authenticated channels with the client (where these channels use TLS)  3c) Everlasting security which is provably secure against an unbounded adversary after phase 1 (while the server is still accepting decryption requests), where:\n the seed has level 2 security in phase 1 we assume g out of T servers have secure, authenticated channels with the client (where these channels use post-quantum TLS)   For levels 3a, 3b, and 3c, to break the encryption, an adversary would need to:\n Harvest data between Alice and Bob Harvest data from greater than T-g server links to Alice or Bob Break the key exchange of the seed Break the protocol for downloading random  Information theoretic security that is provably secure against an unbounded adversary (which Qrypt only has the capability of doing with physical transfer of key material)  "
},
{
	"uri": "https://QryptInc.github.io/sdk/api/",
	"title": "API Reference",
	"tags": [],
	"description": "",
	"content": "Detailed API References for a growing list of plaforms.\nQrypt SDK for C++ "
},
{
	"uri": "https://QryptInc.github.io/faqs/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "",
	"content": "What do I do if I forget my password?\nQrypt does not have access to your password, but you can place a request to change your password.\n Navigate to the portal at https://portal.qrypt.com/login and click the “Forgot password?” link. Enter the email address associated with your account and click the “Send me the link” button. Check your email for a message with further instructions.   How do I change my password?\n Navigate to the portal at https://portal.qrypt.com/login and login to your account. Click the account icon (top-right corner) and select “Account settings.” Click the “Change password” link. Enter your original password, enter a new password, and click the “Change password” button.   What should I do with my access token?\nYour access token is the mechanism by which your account will be charged for entropy data, and as such, it should be treated as secure and secret information (much as you would treat a password).\n I lost or forgot to save my access token. How can I retrieve it?\nTo increase security, Qrypt only displays access tokens when they are first generated. If you have lost your token, you can contact Qrypt sales support at support@qrypt.com or generate a new one.\n What happens if my access token expires?\nAfter an access token expires, any quantum entropy service requests using that token will return an error code of 401. After an access token expires, any key generation SDK calls using that token will thow a CannotDownload exception. You will need to generate a new token and use it for future quantum entropy requests or key generation SDK calls.\n What happens if I have exceeded my monthly entropy quota?\nOnce the monthly entropy quota has been reached, quantum entropy service requests will return an error code of 403. Once the monthly entropy quota has been reached, key generation SDK calls will thow a CannotDownload exception. Please contact Qrypt sales support at support@qrypt.com.\n I need more entropy bytes per month than my current quota provides.\nTo increase your quota of entropy bytes you can generate per month, either upgrade from your free account to a paid account or contact Qrypt sales support at support@qrypt.com.\n When does my entropy quota reset?\nYour quota is reset monthly on the day of the month on which you opened the account.\n How is quantum entropy different from rand, urand, grand, and other pseudorandom number generators?\nThe generation of random and pseudorandom numbers is too large a topic to be covered thoroughly here, but the concepts are quite simple. There exist quantum behaviors that are completely random and unpredictable according to the laws of physics. By using a device called a homodyne laser interferometer—which can detect such quantum behaviors—Qrypt can generate and provide sequences of truly random data.\n How can I delete my Qrypt account?\nWe do not currently support online cancellation of accounts. Please contact Qrypt Sales Support at support@qrypt.com to delete your account.\n "
},
{
	"uri": "https://QryptInc.github.io/sdk/changelogs/",
	"title": "Changelogs",
	"tags": [],
	"description": "",
	"content": "Versions  SDK v0.8.6 SDK v0.7.10 SDK v0.7.4 SDK v0.6.4   SDK v0.8.6 Notable Changes:\n Move exceptions to QryptSecurity namespace Rename log level enumerations Update metadata schema Reduce library binary size   SDK v0.7.10 Notable Changes:\n Add chunk multi-threading for genInit and genSync Increase maximum supported OTP size to 10MB   SDK v0.7.4 Notable Changes:\n Improve sample retry logic for genInit and genSync Increase maximum supported OTP size to 512KB Update metadata schema   SDK v0.6.4 Notable Changes:\n Initial baseline of the SDK   "
},
{
	"uri": "https://QryptInc.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://QryptInc.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
[
{
	"uri": "https://QryptInc.github.io/eaas/",
	"title": "Entropy as a Service",
	"tags": [],
	"description": "",
	"content": "Using Qrypt Entropy as a Service Qrypt’s Entropy as a Service is a RESTful web service that allows you to generate random data (henceforth referred to as entropy or random) that is truly random—based on quantum-mechanical phenomena.\nGetting Started To start using Qrypt Entropy as a Service, you need to create a Qrypt account, obtain an access token, and submit an HTTP request.\nCreate a free Qrypt account To request entropy from the service, you must first create an account.\nNavigate to https://portal.qrypt.com and create a new account.\nEnter your email address and a strong password, then click the button to create your account.\nCheck your email for the 4-digit account confirmation code and enter it on the website to confirm your account.\nWhen prompted, enter your first and last name.\nGenerate an access token An access token is required to submit REST API requests.\nNavigate to the Tokens page.\nAssign a name to the token to help you distinguish between different tokens.\nSelect the expiration period. This determines when the token will expire and need to be replaced.\nClick the “Generate token” button.\nThe generated token will be displayed along with an example of how entropy data can be requested. Copy the token using the “Copy” button and store it in a secure location. Important: This is the only time you will be able to view the access token. Be sure to copy and store it before closing this popup.\nSave the access token to a secure location. Because your access token is used to make requests for entropy—a budgeted resource—it should be treated as secure data, very much like a password.\nSubmit a request for entropy To get entropy from the service, you must submit an HTTP request to the REST API service, providing the aforementioned access token and specifying the number of 1,024-byte blocks of entropy you would like to receive. You must also specify an access token—which identifies the user account requesting the data—in an HTTP “authorization” header. The data is returned in a JSON-encoded structure containing an array of base64-encoded strings, each of which decodes to a 1,024-byte block of entropy, as well as an integer specifying the number of strings in the array.\nTo ensure the privacy of your access token and the entropy data, all calls are made using an encrypted HTTPS connection.\nFollow these steps in your preferred tool or language of choice to request entropy (see subsequent sections Request and Response for details):\nSpecify your access token and the desired number of kibibytes (1,024 bytes) of entropy in a web request. Use the following URL: https://api-eus.qrypt.com/api/v1/quantum-entropy?size={kib_entropy}\nReplace {kib_entropy} in the aforementioned URL with an integer indicating the number of kibibytes of entropy to return.\nInclude an HTTP “Accept” header field with a value of “application/json”.\nInclude an HTTP “Authorization” header with a value of “Bearer {access_token}”, where {access_token} is the access token obtained from the Qrypt portal.\nSubmit the HTTP request using the HTTP GET method.\nIf the HTTP request is successful, the JSON-formatted response will contain a structure containing two fields named “random” and “size”. The “random” field contains an array of base64-encoded strings (each of which—when decoded—contains 1,024 bytes of entropy). The “size” field contains the number of elements in the “random” field.\nThe following sections provide more detailed explanations of the request and response.\nRequest The web service consists of one REST API call, which returns the entropy. The following table describes the properties of a valid REST API call.\nHTTP Verb GET URL https://api-eus.qrypt.com/api/v1/quantum-entropy?size={kib_entropy} {kib_entropy} is an integer that specifies the number of kibibytes (1,024 bytes) of entropy being requested. The minimum value is 1 and the maximum value is 512. If unspecified, the default value is one (1). Accept(header) \"application/json\" Authorization(header) \"Bearer {qrypt_access_token}\" {qrypt_access_token} is an access token generated in the Qrypt portal. Qrypt’s EaaS is hosted in several locations worldwide. This allows you to access a server that is closer to the client for better reliability and response time. The following table (Table 2) indicates which subdomain to use in your URL to access the server located in the specified region.\nSubdomain Geographic location api-eus Eastern United States api-weu Western Europe Response The response from the HTTP request will contain a numeric status code indicating whether or not the request succeeded and, if not, why. If successful, it will also return the entropy.\nStatus code Description 200 SuccessEntropy was successfully returned. 400 Bad requestThe request was invalid (i.e., malformed or otherwise unacceptable). Please verify the format of the URL and the specified parameters. 401 UnauthorizedThe access token is either invalid or has expired. 403 Limit reachedThe account associated with the specified access token has already retrieved the maximum allotment of entropy allowed for the current period. Please contact a Qrypt representative to request a change to your limit. 429 Rate Limit reachedThe access token used to pull random has exceeded the maximum number of requests (30) allowed for the designated time interval (10 seconds). Please wait and try again. 500 Internal server errorThe Qrypt service has encountered an internal error. Please contact Qrypt support for further assistance. 503 Not enough supplyQrypt’s supply of entropy is temporarily insufficient to fulfill the request. Please wait and try the request again. If a success status code of 200 was returned, the response contains a JSON-encoded structure containing an array size (which should match the kib_entropy value specified in the request) and an array of base64-encoded strings which, when decoded, contains 1,024 bytes of entropy.\nJSON Fields Description random An array of base64-encoded strings (as defined in RFC 4648 §4, Base 64 Encoding) . The length of the array is specified in the size field (below). Each string, when decoded, contains a 1,024-byte sequence of entropy. size The number of base64-encoded strings in the array returned in the random field (above). The following illustrates an example of JSON output as returned by a request for two 1,024-byte blocks of entropy:\n\u0026#34;random\u0026#34;: [ \u0026#34;\u0026lt;base64 encoding of 1,024 bytes of entropy\u0026gt;\u0026#34;, \u0026#34;\u0026lt;base64 encoding of 1,024 bytes of entropy\u0026gt;\u0026#34; ], \u0026#34;size\u0026#34;: 2 Examples The following examples demonstrate how to submit a request and display the returned entropy. In the following examples, {subdomain} should be replaced with the subdomain for a server in the geographic location you would like to use (see Table 2), {kib_entropy} should be replaced with an integer between 1 and 512, and {qrypt_access_token} should be replaced with an access token generated using your Qrypt account.\nCurl The following shows an example of how to submit a request for {kib_entropy} kibibytes of entropy using the {qrypt_access_token} via the curl command-line command. This command can be executed at a Windows or Unix command prompt.\ncurl https://{subdomain}.qrypt.com/api/v1/quantum-entropy?size={kib_entropy} -H \u0026quot;Authorization: Bearer {qrypt_access_token}\u0026quot;\nPowerShell The following shows an example of how to submit a request for {kib_entropy} kibibytes of data using the {qrypt_access_token} in PowerShell.\n# Specify entropy token, requested size of entropy, and subdomain\n[string] $accesstoken = '{qrypt_access_token}'\n[int] $kibData = {kib_entropy}\n[string] $sub = '{subdomain}'\n# Define the request URL\n[string] $url = \u0026quot;https://$sub.qrypt.com/api/v1/quantum-entropy?size=$kibData\u0026quot;\n# Define and submit the request\n$response = Invoke-RestMethod -Method Get -Uri $url -UseBasicParsing `-Headers @{ authorization = \u0026quot;Bearer $accesstoken\u0026quot; } ` -ContentType 'application/json' # Display the entropy bytes\nresponse.random | foreach { [Convert]::FromBase64String($_) }\nPython The following shows an example of how to submit a request for {kib_entropy} kibibytes of data using the {qrypt_access_token} in Python.\nYou may need to install the “requests” module before executing this example. For example, use the following command: python -m pip install requests\nimport requests import base64 # Specify entropy token, requeststed size of entropy, and subdomain accesstoken = \u0026#39;{qrypt_access_token}\u0026#39; kibData = {kib_entropy} sub = \u0026#39;{subdomain}\u0026#39; # Define the request URL url = f\u0026#39;https://{sub}.qrypt.com/api/v1/quantum-entropy\u0026#39; # Define and submit the request headers = { \u0026#39;Authorization\u0026#39;: f\u0026#39;Bearer {accesstoken}\u0026#39; } params = { \u0026#39;size\u0026#39;: kibData } response = requests.get( url, headers=headers, params=params) # Display the entropy bytes for s in response.json()[\u0026#39;random\u0026#39;]: for b in base64.decodebytes( s.encode(\u0026#39;ascii\u0026#39;) ): print( f\u0026#39;{b}) JavaScript The following shows an example of how to submit a request for {kib_entropy} kibibytes of data using the {qrypt_access_token} in JavaScript.\n\u0026#34;use strict\u0026#34; // Specfify entropy token, requested size of entropy, and subdomain let accesstoken = \u0026#39;{qrypt_access_token}\u0026#39; let kibData = {kib_entropy} let sub = \u0026#39;{subdomain}\u0026#39; // Define the request URL let url = `https://${sub}.qrypt.com/api/v1/quantum-entropy?size=${kibData}` // Submit the request and process the response fetch(url, { method: \u0026#39;GET\u0026#39;, headers: { \u0026#39;Accept\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;: \u0026#34;Bearer \u0026#34; + accesstoken }, }) .then( response =\u0026gt; response.json() ) .then( function ( json ) { // Display the entropy bytes json.random.forEach( b64 =\u0026gt; [...( atob( b64 ))].forEach( c =\u0026gt; console.log( c.charCodeAt( 0 ))) )}) "
},
{
	"uri": "https://QryptInc.github.io/eaas/faqs/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "",
	"content": "What should I do with my access token?\nYour access token is the mechanism by which your account will be charged for entropy data, and as such, it should be treated as secure and secret information (much as you would treat a password).\nOnce I receive the EaaS response, how do I obtain entropy from it?\nThe EaaS service response is encoded as a JSON structure. Its “random” property will contain an array of base64-encoded strings. The “size” property specifies the length of the array, which should be the same as the size that was specified in the request (i.e., the number of kibibytes of entropy).\nEach base64-encoded string can be decoded to 1,024 bytes of entropy. When all base64-encoded strings are decoded, the concatenation of all decoded bytes comprises the total requested entropy.\nWhat do I do if I forget my password?\nQrypt does not have access to your password, but you can place a request to change your password.\nNavigate to the portal at https://portal.qrypt.com/login and click the “Forgot password?” link.\nEnter the email address associated with your account and click the “Send me the link” button.\nCheck your email for a message with further instructions.\nHow do I change my password?\nNavigate to the portal at https://portal.qrypt.com/login and login to your account.\nClick the account icon (top-right corner) and select “Account settings.”\nClick the “Change password” link.\nEnter your original password, enter a new password, and click the “Change password” button.\nHow do I request a new access token?\nSee section “Generate an access token” for instructions on how to request a new access token.\nI lost or forgot to save my access token. How can I retrieve it?\nTo increase security, Qrypt only displays access tokens when they are first generated. If you have lost your token, you can contact Qrypt sales support at support@qrypt.com or generate a new one.\nWhat happens if I have exceeded my monthly entropy quota?\nIf a request is made after the monthly entropy quota has been reached, the service request will return an error code of 403. Please contact Qrypt sales support at support@qrypt.com.\nI need more entropy bytes per month than my current quota provides.\nTo increase your quota of entropy bytes you can generate per month, either upgrade from your free account to a paid account or contact Qrypt sales support at support@qrypt.com.\nWhen does my entropy quota reset?\nYour quota is reset monthly on the day of the month on which you opened the account.\nWhat happens if my access token expires?\nAfter an access token expires, any requests for entropy using that token will return an error code of 401. You will need to generate a new token and use it for future entropy requests.\nHow is quantum entropy different from rand, urand, grand, and other pseudorandom number generators?\nThe generation of random and pseudorandom numbers is too large a topic to be covered thoroughly here, but the concepts are quite simple. There exist quantum behaviors that are completely random and unpredictable according to the laws of physics. By using a device called a homodyne laser interferometer—which can detect such quantum behaviors—Qrypt can generate and provide sequences of truly random data.\nHow can I delete my Qrypt account?\nWe do not currently support online cancellation of accounts. Please contact Qrypt Sales Support at support@qrypt.com to delete your account.\nI am receiving an error response code from the Qrypt service. How do I identify the problem?\nThe web service returns a status code with each response. This status code should indicate the cause of the failure. In addition to the standard HTTP error codes, the service may also return a Qrypt-specific error code, as detailed in the following table.\nStatus code Explanation and possible remediation 400 The request was invalid. Verify that the request is using the correct access token and URL, and that the requested entropy size specified in the URL is between 1 and 512. 401 Your token is invalid or has expired. Ensure the access token being used is valid or obtain a new valid token. 403 The request has exceeded your monthly entropy quota. 429 You have exceeded the maximum number of requests (30) for the given time interval (10 seconds) with your access token. 500 The Qrypt server is experiencing issues. Please try again later. If the problem persists, please contact Qrypt Technical Support. 503 The Qrypt entropy supply is low. Please try again later. If the problem persists, please contact Qrypt Technical Support. "
},
{
	"uri": "https://QryptInc.github.io/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": " Qrypt Documentation Our documentation is written by developers for developers. The goal is to make it as easy as possible for developers to use Qrypt to secure applications and infrastructure.\nWe believe that documentation benefits from sharing and collaborative improvement. Qrypt documentation is available on Github pages and we invite anybody to make changes or to create issues when there is content that needs to be improved.\nIntegrating with Qrypt Below is a list of the products that Qrypt offers with links to their supporting documentation.\nEntropy - Docs Qrypt Entropy as a Service (EaaS) measures quantum effects and converts those measurements into pure random numbers. EaaS leverages multiple Quantum Random Number Generators (QRNGs) developed by national and international research labs to ensure the highest quality random.\nKey Generation - Docs Qrypt SDK includes client library SDKs, cloud-based REST services, command line clients and guidance to help integrate post-quantum security into your applications and services. You can add security features to your applications without being an expert in post-quantum cryptography.\n"
},
{
	"uri": "https://QryptInc.github.io/sdk/quickstarts/cpp/",
	"title": "Qrypt SDK for C++ Quickstarts",
	"tags": [],
	"description": "",
	"content": "The Qrypt SDK for C++ enables developers to add post-quantum security to their applications and services.\nCurrently we provide Local Key Generation and Distributed Key Generation.\nLibrary Compatibility\nThe Qrypt SDK for C++ is built using the following compilers.\nPlatform Compiler CPU Linux Clang 9.0.0 x64 Macos AppleClang 12.0.0.12000032 x64 Windows Clang 9.0.0 with MSVC-like command-line x64 The Qrypt Security Linux SDK v0.5.2 and earlier is compatible with CentOS 7 only. The next release will migrate compatibility to modern versions of Fedora and Ubuntu.\nSample Code Find the finalized code for these quickstarts on GitHub.\nPrerequisites A Qrypt Account. Create an account for free. Quickstarts Distributed key generation Local key generation "
},
{
	"uri": "https://QryptInc.github.io/sdk/api/cpp/",
	"title": "Qrypt SDK for C++",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "https://QryptInc.github.io/sdk/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "Developers need familiar tools based on modern development practices. We provide an SDK that can be easily integrated to applications and infrastructure to make them quantum-secure.\nThe Qrypt SDK includes client library SDKs, cloud-based REST services, command line clients and guidance to help integrate post-quantum security into your applications and services. You can add security features to your applications without being an expert in post-quantum cryptography.\nQrypt SDK for C++ Features\nlocal key generation distributed key generation Library Compatibility\nThe C++ SDK is built using the following compilers.\nPlatform Compiler CPU Linux Clang 9.0.0 x64 Macos AppleClang 12.0.0.12000032 x64 Windows Clang 9.0.0 with MSVC-like command-line x64 The Qrypt Security Linux SDK v0.5.2 and earlier is compatible with CentOS 7 only. The next release will migrate compatibility to modern versions of Fedora and Ubuntu.\n"
},
{
	"uri": "https://QryptInc.github.io/sdk/concepts/blast-distributed-multiple-endpoints/",
	"title": "BLAST Distributed - multiple endpoints",
	"tags": [],
	"description": "",
	"content": "Key distribution based on asymmetric algorithms is a weak link for cryptography.\nQrypt is the only company that enables encryption without distributing encryption keys – also basing them on trusted quantum random numbers.\nThe BLAST architecture enables generation of identical keys at multiple endpoints, so they are never distributed. Caches of random allow for sampling by multiple clients – with time and usage controls that trigger cache shredding. Client locally extracts keys from returned random – not even Qrypt can determine the keys. No dedicated channels or infrastructure required – unlike quantum key distribution (QKD). Walk-through\nClient A determines the key generation requirements: BLAST servers to be used, the sampling seeds, and extraction parameters​. Clients share the key generation requirements – seeds, extraction parameters​. Each client independently samples BLAST APIs, assembling identical blocks of random on each client.​ Clients locally extracts keys - resulting in identical encryption keys which were never distributed​ ​Attack scenarios required to compromise keys are extreme​\nAttacker compromises the A to B channel and decrypts the key generation requirements before the server caches are shredded and can no longer be sampled. Even with a quantum computer the time to decrypt is too long.​ Attacker compromises ALL aspects of the BLAST protocol, including PQC crypto​ Compromises ALL channels between a client and the N BLAST servers​ Compromises the A to B channel​ Defeat PQC cryptography used in A to B channel​ Full control of Client A or Client B​ "
},
{
	"uri": "https://QryptInc.github.io/sdk/quickstarts/cpp/keygendistributed/",
	"title": "Quickstart: Distributed Key Generation",
	"tags": [],
	"description": "",
	"content": "Sample Code Find the finalized code for this quickstart on GitHub.\nPrerequisites A Qrypt Account. Create an account for free. Install CMake. (Windows) Install git bash - comes with typical git install. (Optional) Install Visual Studio Code. Setup Clone the repo containing this quickstart to a local folder on a Linux, Mac or Windows platform.\nRetrieve a token from the Qrypt Portal.\n(Optional) Create an environment variable QRYPT_TOKEN for it. For simplicity, the commands below will be referencing a QRYPT_TOKEN environment variable but you can also just use the token directly in the commands below.\nDownload the Qrypt Security SDK from the Qrypt Portal for your platform.\nLinux/Windows\nVerify the lib folder exists and extract the Qrypt Security SDK into it. Expected Folder structure (Linux/Windows)\nKeyGenDistributed /lib /QryptSecurity /bin (Windows) /include /lib /res (Windows) The Qrypt Security Linux SDK v0.5.2 and earlier is compatible with CentOS 7 only. The next release will migrate compatibility to modern versions of Fedora and Ubuntu.\nMacOS\nMake sure there is a \u0026ldquo;Frameworks\u0026rdquo; directory in the local user\u0026rsquo;s \u0026ldquo;Library\u0026rdquo; directory. If not create one. Copy the QryptSecurity.framework directory and its contents to ~/Library/Frameworks/. Expected Folder structure (MacOS)\n~/Library/Frameworks /QryptSecurity.framework Build To change to the KeyGenDistributed folder:\ncd KeyGenDistributed To make a (debug) build:\n./build.sh --build_type=Debug To find the build folder (if it built successfully):\nFor linux/mac\nls -d build For windows\nls -d build/Debug/ To see more build options:\n./build.sh --help Run Run as Alice To change to the KeyGenDistributed build folder:\nFor linux/mac\ncd KeyGenDistributed/build for windows\ncd KeyGenDistributed/build/Debug To run as Alice:\n./KeyGenDistributed --user=alice --token=${QRYPT_TOKEN} --key-type=aes --metadata-filename=metadata.bin Run as Bob To change to the KeyGenDistributed build folder:\nFor linux/mac\ncd build for windows\ncd build/Debug To run as Bob:\n./KeyGenDistributed --user=bob --token=${QRYPT_TOKEN} --metadata-filename=metadata.bin Debug If you open the folder KeyGenDistributed In Visual Studio Code, you will find debug setups for running as Alice and Bob.\n"
},
{
	"uri": "https://QryptInc.github.io/sdk/quickstarts/cpp/keygenlocal/",
	"title": "Quickstart: Local Key Generation",
	"tags": [],
	"description": "",
	"content": "Sample Code Find the finalized code for this quickstart on GitHub\nPrerequisites A Qrypt Account. Create an account for free. Install CMake (Windows) Install git bash - comes with typical git install. (Optional) Install Visual Studio Code. Setup Clone the repo containing this quickstart to a local folder on a Linux, Mac or Windows platform. Retrieve a token from the Qrypt Portal (Optional) Create an environment variable QRYPT_TOKEN for it. For simplicity, the commands below will be referencing a QRYPT_TOKEN environment variable but you can also just use the token direclty in the commands below. Download the Qrypt Security SDK from the Qrypt Portal for your platform. Linux/Windows\nVerify the lib folder exists and extract the Qrypt Security SDK into it. Expected Folder structure (Linux/Windows)\nKeyGenDistributed /lib /QryptSecurity /bin (Windows) /include /lib /res (Windows) The Qrypt Security Linux SDK v0.5.2 and earlier is compatible with CentOS 7 only. The next release will migrate compatibility to modern versions of Fedora and Ubuntu.\nMacOS\nMake sure there is a \u0026ldquo;Frameworks\u0026rdquo; directory in the local user\u0026rsquo;s \u0026ldquo;Library\u0026rdquo; directory. If not create one. Copy the QryptSecurity.framework directory and its contents to ~/Library/Frameworks/. Expected Folder structure (MacOS)\n~/Library/Frameworks /QryptSecurity.framework Build To change to the KeyGenLocal folder:\ncd KeyGenLocal To make a (debug) build:\n./build.sh --build_type=Debug To find the build folder (if it built successfully):\nFor linux/mac\nls -d build For windows\nls -d build/Debug/ To see more build options:\n./build.sh --help Run To change to the KeyGenLocal build folder:\nFor linux/mac\ncd build For windows\ncd build/Debug To create and dspaly the locally generated AES key:\n./KeyGenLocal --token=${QRYPT_TOKEN} --cache-dir=cache Debug If you open the folder KeyGenLocal In Visual Studio Code, you will find a debug setup for KeyGenLocal.\n"
},
{
	"uri": "https://QryptInc.github.io/sdk/",
	"title": "Key Generation",
	"tags": [],
	"description": "",
	"content": "Businesses need to protect against the future quantum threat, and never distribute encryption keys that can be intercepted. The Qrypt SDK allows you to generate identical keys at multiple endpoints.\nOverview Quickstarts Concepts API Reference "
},
{
	"uri": "https://QryptInc.github.io/sdk/quickstarts/",
	"title": "Quickstarts",
	"tags": [],
	"description": "",
	"content": "Use the Quickstarts to quickly get up and running with the Qrypt SDK.\nQrpyt SDK for C++ Quickstarts "
},
{
	"uri": "https://QryptInc.github.io/sdk/concepts/blast-local/",
	"title": "BLAST Local",
	"tags": [],
	"description": "",
	"content": "Certain use cases prefer local implementation.\nQrypt’s solution has the flexibility for local management.\nKeys can be generated based on trusted quantum - reducing the chance of a random-based attack Client locally extracts keys from returned random – not even Qrypt can determine the keys Supports* integration to standard key management solutions "
},
{
	"uri": "https://QryptInc.github.io/sdk/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "",
	"content": "Use the pages in this section to dig deeper into the post-quantum technologies Qrypt has to offer.\nBLAST Distributed - multiple endpoints BLAST Local How to estimate the projected size of entropy? "
},
{
	"uri": "https://QryptInc.github.io/sdk/concepts/entropy-projection/",
	"title": "How to estimate the projected size of entropy?",
	"tags": [],
	"description": "",
	"content": "Formula: Total entropy size = (Number of keys) x (Entropy size per key)\nTable: Key Size (byte) Entropy Size Per Key (byte) 16 22,120 (21.6 KiB) 32 (size of an AES-256 key) 22,440 (21.9 KiB) 64 23,080 (22.5 KiB) 128 24,280 (23.7 KiB) 256 26,680 (26.1 KiB) 512 31,200 (30.5 KiB) 1,024 (1 KiB) (1.0 KB) 39,600 (38.7 KiB) 2,048 (2 KiB) (2.0 KB) 55,080 (53.8 KiB) 4,096 (4 KiB) (4.1 KB) 83,560 (81.6 KiB) 32,768 (32 KiB) (32.8 KB) 423,480 (413.6 KiB) Example 1: To generate (or to sync) 100 of AES-256 keys, the entropy size will be\n100 x 22,440 = 2,244,000 bytes = 2.1 MiB.\nExample 2: To generate (or to sync) 100 of 128-byte OTP keys, the entropy size will be\n100 x 24,280 = 2,428,000 bytes = 2.3 MiB.\nExample 3: To generate (or to sync) 100 of AES-256 keys and 200 of 128-byte OTP keys, the entropy size will be\n100 x 22,440 + 200 x 24,280 = 7,100,000 bytes = 6.8 MiB.\nExample 4: 25 MiB entropy quota allows you to generate (or to sync)\n25 * 1024 * 1024 / 22,440 = 1168 of AES-256 keys in total.\n"
},
{
	"uri": "https://QryptInc.github.io/sdk/api/",
	"title": "API Reference",
	"tags": [],
	"description": "",
	"content": "Detailed API References for a growing list of plaforms.\nQrypt SDK for C++ "
},
{
	"uri": "https://QryptInc.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://QryptInc.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
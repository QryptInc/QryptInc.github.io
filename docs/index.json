[
{
	"uri": "https://QryptInc.github.io/getting_started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Create a free Qrypt account First, create an account.\nNavigate to https://portal.qrypt.com and create a new account. Enter your email address and a strong password, then click the button to create your account. Check your email for the 4-digit account confirmation code and enter it on the website to confirm your account. When prompted, enter your first and last name. Generate an access token To use Qrypt\u0026rsquo;s Quantum Entropy or Key Generation, you need an access token.\nNavigate to the Tokens page. Assign a name to the token to help you distinguish between different tokens. Select \u0026lsquo;Entropy\u0026rsquo; and/or \u0026lsquo;Keygen to specify which service you will be using the token for. Select the expiration period. This determines when the token will expire and need to be replaced. Click the \u0026ldquo;Generate token\u0026rdquo; button. The generated token will be displayed. Copy the token using the “Copy” button and store it in a secure location. Important: This is the only time you will be able to view the access token. Be sure to copy and store it before closing this popup. Save the access token to a secure location. Your access token is used to make requests for entropy, a budgeted resource. It should be treated as secure data, very much like a password. Explore Qrypt\u0026rsquo;s Services With your access token, you can now use Qrypt\u0026rsquo;s services. Explore this documentation site to learn more about the different services we offer.\n"
},
{
	"uri": "https://QryptInc.github.io/eaas/",
	"title": "Quantum Entropy",
	"tags": [],
	"description": "",
	"content": "Using Qrypt\u0026rsquo;s Quantum Entropy Service Qrypt’s Entropy as a Service is a RESTful web service that allows you to generate random data (henceforth referred to as entropy or random) that is truly random—based on quantum-mechanical phenomena.\nThis service requires an access token. Follow the steps in Getting Started to obtain an access token.\nRelated Tools and Services RNG Tools: Integrating Qrypt\u0026rsquo;s Quantum Entropy service as a random source for system devices. Qseed: Integrating Qrypt\u0026rsquo;s Quantum Entropy service as a random source for PKCS#11 HSMs. Submit a request for entropy To get entropy from the service, you must submit an HTTP request to the REST API service, providing your access token and specifying the number of 1,024-byte blocks of entropy you would like to receive. You must also specify an access token—which identifies the user account requesting the data—in an HTTP “authorization” header. The data is returned in a JSON-encoded structure containing an array of base64-encoded strings, each of which decodes to a 1,024-byte block of entropy, as well as an integer specifying the number of strings in the array.\nTo ensure the privacy of your access token and the entropy data, all calls are made using an encrypted HTTPS connection.\nFollow these steps in your preferred tool or language of choice to request entropy (see subsequent sections Request and Response for details):\nSpecify your access token and the desired number of kibibytes (1,024 bytes) of entropy in a web request. Use the following URL: https://api-eus.qrypt.com/api/v1/quantum-entropy?size={kib_entropy}. Replace {kib_entropy} in the aforementioned URL with an integer indicating the number of kibibytes of entropy to return. Include an HTTP “Accept” header field with a value of “application/json”. Include an HTTP “Authorization” header with a value of “Bearer {access_token}”, where {access_token} is the access token obtained from the Qrypt portal. Submit the HTTP request using the HTTP GET method. If the HTTP request is successful, the JSON-formatted response will contain a structure containing two fields named “random” and “size”. The “random” field contains an array of base64-encoded strings (each of which—when decoded—contains 1,024 bytes of entropy). The “size” field contains the number of elements in the “random” field. The following sections provide more detailed explanations of the request and response.\nRequest The web service consists of one REST API call, which returns the entropy. The following table describes the properties of a valid REST API call.\nHTTP Verb GET URL https://api-eus.qrypt.com/api/v1/quantum-entropy?size={kib_entropy}\n{kib_entropy} is an integer that specifies the number of kibibytes (1,024 bytes) of entropy being requested. The minimum value is 1 and the maximum value is 512. If unspecified, the default value is one (1). Accept\n(header) \"application/json\" Authorization\n(header) \"Bearer {qrypt_access_token}\" {qrypt_access_token} is an access token generated in the Qrypt portal. Qrypt’s Quantum Entropy service is hosted in several locations worldwide. This allows you to access a server that is closer to the client for better reliability and response time. The following table (Table 2) indicates which subdomain to use in your URL to access the server located in the specified region.\nSubdomain Geographic location api-eus Eastern United States Response The response from the HTTP request will contain a numeric status code indicating whether or not the request succeeded and, if not, why. If successful, it will also return the entropy.\nStatus code Description 200 Success\nEntropy was successfully returned. 400 Bad request\nThe request was invalid (i.e., malformed or otherwise unacceptable). Please verify the format of the URL and the specified parameters. 401 Unauthorized\nThe access token is either invalid or has expired. 403 Limit reached\nThe account associated with the specified access token has already retrieved the maximum allotment of entropy allowed for the current period. Please contact a Qrypt representative to request a change to your limit. 429 Rate Limit reached\nThe access token used to pull random has exceeded the maximum number of requests (30) allowed for the designated time interval (10 seconds). Please wait and try again. 500 Internal server error\nThe Qrypt service has encountered an internal error. Please contact Qrypt support for further assistance. 503 Not enough supply\nQrypt’s supply of entropy is temporarily insufficient to fulfill the request. Please wait and try the request again. If a success status code of 200 was returned, the response contains a JSON-encoded structure containing an array size (which should match the kib_entropy value specified in the request) and an array of base64-encoded strings which, when decoded, contains 1,024 bytes of entropy.\nJSON Fields Description random An array of base64-encoded strings (as defined in RFC 4648 §4, Base 64 Encoding) . The length of the array is specified in the size field (below). Each string, when decoded, contains a 1,024-byte sequence of entropy. size The number of base64-encoded strings in the array returned in the random field (above). The following illustrates an example of JSON output as returned by a request for two 1,024-byte blocks of entropy:\n\u0026#34;random\u0026#34;: [ \u0026#34;\u0026lt;base64 encoding of 1,024 bytes of entropy\u0026gt;\u0026#34;, \u0026#34;\u0026lt;base64 encoding of 1,024 bytes of entropy\u0026gt;\u0026#34; ], \u0026#34;size\u0026#34;: 2 Examples The following examples demonstrate how to submit a request and display the returned entropy. In the following examples, {subdomain} should be replaced with the subdomain for a server in the geographic location you would like to use (see Table 2), {kib_entropy} should be replaced with an integer between 1 and 512, and {qrypt_access_token} should be replaced with an access token generated using your Qrypt account.\nCurl The following shows an example of how to submit a request for {kib_entropy} kibibytes of entropy using the {qrypt_access_token} via the curl command-line command. This command can be executed at a Windows or Unix command prompt.\ncurl https://{subdomain}.qrypt.com/api/v1/quantum-entropy?size={kib_entropy} -H \u0026#34;Authorization: Bearer {qrypt_access_token}\u0026#34; PowerShell The following shows an example of how to submit a request for {kib_entropy} kibibytes of data using the {qrypt_access_token} in PowerShell.\nSpecify entropy token, requested size of entropy, and subdomain\n[string] $accesstoken = \u0026#39;{qrypt_access_token}\u0026#39; [int] $kibData = {kib_entropy} [string] $sub = \u0026#39;{subdomain}\u0026#39; Define the request URL\n[string] $url = \u0026#34;https://$sub.qrypt.com/api/v1/quantum-entropy?size=$kibData\u0026#34; Define and submit the request\n$response = Invoke-RestMethod -Method Get -Uri $url -UseBasicParsing `-Headers @{ authorization = \u0026#34;Bearer $accesstoken\u0026#34; } ` -ContentType \u0026#39;application/json\u0026#39; Display the entropy bytes\nresponse.random | foreach { [Convert]::FromBase64String($_) } Python The following shows an example of how to submit a request for {kib_entropy} kibibytes of data using the {qrypt_access_token} in Python.\nYou may need to install the “requests” module before executing this example. For example, use the following command:\npython -m pip install requests import requests import base64 # Specify entropy token, requeststed size of entropy, and subdomain accesstoken = \u0026#39;{qrypt_access_token}\u0026#39; kibData = {kib_entropy} sub = \u0026#39;{subdomain}\u0026#39; # Define the request URL url = f\u0026#39;https://{sub}.qrypt.com/api/v1/quantum-entropy\u0026#39; # Define and submit the request headers = { \u0026#39;Authorization\u0026#39;: f\u0026#39;Bearer {accesstoken}\u0026#39; } params = { \u0026#39;size\u0026#39;: kibData } response = requests.get( url, headers=headers, params=params) # Display the entropy bytes for s in response.json()[\u0026#39;random\u0026#39;]: for b in base64.decodebytes( s.encode(\u0026#39;ascii\u0026#39;) ): print( f\u0026#39;{b}\u0026#39;) JavaScript The following shows an example of how to submit a request for {kib_entropy} kibibytes of data using the {qrypt_access_token} in JavaScript.\n\u0026#34;use strict\u0026#34;; // Specify entropy token, requested size of entropy, and subdomain let accessToken = \u0026#34;{qrypt_access_token}\u0026#34;; let kibData = { kib_entropy }; let sub = \u0026#34;{subdomain}\u0026#34;; // Define the request URL let url = `https://${sub}.qrypt.com/api/v1/quantum-entropy?size=${kibData}`; // Submit the request and process the response fetch(url, { method: \u0026#34;GET\u0026#34;, headers: { Accept: \u0026#34;application/json\u0026#34;, Authorization: \u0026#34;Bearer \u0026#34; + accessToken, }, }) .then((response) =\u0026gt; response.json()) .then(function (json) { // Display the entropy bytes json.random.forEach((b64) =\u0026gt; [...atob(b64)].forEach((c) =\u0026gt; console.log(c.charCodeAt(0))) ); }); "
},
{
	"uri": "https://QryptInc.github.io/eaas/rngd/",
	"title": "RNG Tools",
	"tags": [],
	"description": "",
	"content": "Using Qrypt\u0026rsquo;s Quantum Entropy in RNG Tools rng-tools is a utility that allows you to inject entropy from hardware sources, prngs, and http streams into system devices. Qrypt\u0026rsquo;s Quantum Entropy service is a random source option in rng-tools, allowing you to inject quantum entropy into system devices such as \u0026lsquo;/dev/random\u0026rsquo;, \u0026lsquo;/dev/urandom\u0026rsquo;, and user-defined nodes or files.\nThis service requires an access token. Follow the steps in Getting Started to obtain an access token.\nMore information about rng-tools can be found on the rng-tools Github and the rng-tools wiki page.\nInstallation To use Qrypt\u0026rsquo;s Quantum Entropy service in rng-tools, rng-tools must be installed and configured.\nClone the latest rng-tools master from GitHub.\ngit clone https://github.com/nhorman/rng-tools Install rng-tools dependencies. Additional packages may be required, depending on linux distro. The configure script below will name any missing packages it encounters.\nsudo apt install \\ make \\ libtool \\ libxml2-dev \\ libssl-dev \\ libcurl3-dev \\ libp11-dev \\ librtlsdr-dev \\ libusb-1.0-0-dev \\ libjansson-dev \\ libcap-dev Add --disable-dependency-tracking to the \u0026lsquo;./configure\u0026rsquo; command if needed.\n./autogen.sh ./configure make sudo make install Verify installation.\nwhich rngd Command Line Usage The resulting \u0026lsquo;rngd\u0026rsquo; executable can run directly to start either a daemon or a foreground process. By default, \u0026lsquo;rngd\u0026rsquo; will run as a background daemon and attempt to use the \u0026lsquo;hwrng\u0026rsquo;, \u0026rsquo;errand\u0026rsquo;, \u0026lsquo;pkcs11\u0026rsquo;, and \u0026lsquo;rtlsdr\u0026rsquo; random sources.\nTo run \u0026lsquo;rngd\u0026rsquo; using exclusively Qrypt\u0026rsquo;s Quantum Entropy, run the following command. This will run \u0026lsquo;rngd\u0026rsquo; as a foreground process with the Qrypt source enabled and all other entropy sources disabled. \u0026lsquo;rngd\u0026rsquo; will send its random to the /dev/random device.\nNote that \u0026lsquo;sudo\u0026rsquo; is needed in the command because \u0026lsquo;rngd\u0026rsquo; accesses the root folder.\nsudo rngd -f -x hwrng -x rdrand -x pkcs11 -x rtlsdr -n qrypt -O qrypt:tokenfile:\u0026lt;qrypt token path\u0026gt; Command line options: Option Description -f Run 'rngd' as a foreground process. If omitted, 'rngd' will run as a background daemon. -o \u0026lt;path\u0026gt; Device or file for the random number output. Defaults to '/dev/random'. -x \u0026lt;source\u0026gt; Disables the specified source. For example, '-x hwrng'. -n \u0026lt;source\u0026gt; Enables the specified source. For example, '-n qrypt'. -O \u0026lt;source\u0026gt;:\u0026lt;key\u0026gt;:\u0026lt;value\u0026gt; Sets a source specific configuration option. For example, '-O qrypt:tokenfile:/etc/rngd/qrypt.token'. Service Usage rng-tools comes with a \u0026lsquo;rngd.service\u0026rsquo; file for setting up a systemd service. To configure rngd to automatically start the Qrypt source on boot, follow these steps:\nSave your Qrypt api token to a system-accessible directory, such as \u0026lsquo;/etc/rngd/qrypt.token\u0026rsquo;. Then, edit \u0026lsquo;rngd.service\u0026rsquo; to add Qrypt arguments and options.\nNote that \u0026lsquo;sudo\u0026rsquo; is needed in the subsequent commands because \u0026lsquo;rngd\u0026rsquo; accesses the root folder.\n[Unit] Description=Hardware RNG Entropy Gatherer Daemon ConditionVirtualization=!container # The \u0026#39;-f\u0026#39; option is required for the systemd service \u0026#39;rngd\u0026#39; to work with Type=simple [Service] Type=simple ExecStart=\u0026lt;rngd install path\u0026gt; -f -x hwrng -x rdrand -x pkcs11 -x rtlsdr -n qrypt -O qrypt:tokenfile:\u0026lt;qrypt token path\u0026gt; SuccessExitStatus=66 [Install] WantedBy=multi-user.target Copy the \u0026lsquo;rngd\u0026rsquo; service to systemd.\nsudo cp rngd.service /etc/systemd/system/rngd.service sudo chmod 644 /etc/systemd/system/rngd.service Start the \u0026lsquo;rngd\u0026rsquo; service.\nsudo systemctl daemon-reload sudo systemctl start rngd Verify the \u0026lsquo;rngd\u0026rsquo; service is running properly.\nsudo systemctl status rngd Enable the \u0026lsquo;rngd\u0026rsquo; service for it to start on system boot.\nsudo systemctl enable rngd "
},
{
	"uri": "https://QryptInc.github.io/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Qrypt Documentation Our documentation is written by developers for developers. The goal is to make it as easy as possible for developers to use Qrypt to secure applications and infrastructure.\nWe believe that documentation benefits from sharing and collaborative improvement. Qrypt documentation is available on Github pages and we invite anybody to make changes or to create issues when there is content that needs to be improved.\nIntegrating with Qrypt Below is a list of the products that Qrypt offers with links to their supporting documentation.\nQuantum Entropy Qrypt\u0026rsquo;s Quantum Entropy service measures quantum effects and converts those measurements into pure random numbers. The service leverages multiple Quantum Random Number Generators (QRNGs) developed by national and international research labs to ensure the highest quality random.\nKey Generation Qrypt SDK includes client library SDKs, cloud-based REST services, command line clients and guidance to help integrate post-quantum security into your applications and services. You can add security features to your applications without being an expert in post-quantum cryptography.\nPortable OpenSSH with Qrypt This implementation of OpenSSH has been modified to provide additional security via the Qrypt Key Generation SDK. During key exchange negotiation, the Qrypt SDK will generate an additional quantum-secure secret that is added to the session key hash inputs.\n"
},
{
	"uri": "https://QryptInc.github.io/sdk/quickstarts/cpp/",
	"title": "Qrypt SDK for C++ Quickstarts",
	"tags": [],
	"description": "",
	"content": "The Qrypt SDK for C++ enables developers to add post-quantum security to their applications and services.\nCurrently we provide Distributed Key Generation.\nLibrary Compatibility The latest Qrypt SDK for C++ is built using the following compilers.\nPlatform Version Compiler CPU Ubuntu 22.04 gcc 11.4.0 x64 Sample Code Find the finalized code for these quickstarts on GitHub.\nPrerequisites A Qrypt Account. Create an account for free.\nQuickstarts Distributed key generation Generate One-Time Pads Encrypt and decrypt using generated One-Time Pads "
},
{
	"uri": "https://QryptInc.github.io/sdk/api/cpp/",
	"title": "Qrypt SDK for C++",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "https://QryptInc.github.io/sdk/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "Developers need familiar tools based on modern development practices. We provide an SDK that can be easily integrated into applications and infrastructure to make them quantum-secure.\nThe Qrypt SDK includes client library SDKs, cloud-based REST services, command line clients and guidance to help integrate post-quantum security into your applications and services. You can add security features to your applications without being an expert in post-quantum cryptography.\nQrypt SDK for C++ Features Distributed key generation Library Compatibility The latest C++ SDK is built using the following compilers.\nPlatform Version Compiler CPU Ubuntu 22.04 gcc 11.4.0 x64 "
},
{
	"uri": "https://QryptInc.github.io/concepts/key-generation-architecture/",
	"title": "Key Generation Architecture",
	"tags": [],
	"description": "",
	"content": "Key distribution based on asymmetric algorithms is a weak link for cryptography.\nQrypt is the only company that enables encryption without distributing encryption keys – also basing them on trusted quantum random numbers.\nThe BLAST architecture enables generation of identical keys at multiple endpoints, so they are never distributed. Caches of random allow for sampling by multiple clients – with time and usage controls that trigger cache shredding. Client locally extracts keys from returned random – not even Qrypt can determine the keys. No dedicated channels or infrastructure required – unlike quantum key distribution (QKD). Walk-through\nClient A determines the key generation requirements: BLAST servers to be used, the sampling seeds, and extraction parameters​ Clients share the key generation requirements – seeds, extraction parameters​. Each client independently samples BLAST APIs, assembling identical blocks of random on each client.​ Clients locally extracts keys - resulting in identical encryption keys which were never distributed​. Attack scenarios required to compromise keys are extreme\nAttacker compromises the A to B channel and decrypts the key generation requirements before the server caches are shredded and can no longer be sampled. Even with a quantum computer the time to decrypt is too long Attacker compromises ALL aspects of the BLAST protocol, including TLS crypto​ Compromises ALL channels between a client and the N BLAST servers​ Compromises the A to B channel Defeat TLS cryptography used in A to B channel Full control of Client A or Client B "
},
{
	"uri": "https://QryptInc.github.io/sdk/",
	"title": "Key Generation",
	"tags": [],
	"description": "",
	"content": "Businesses need to protect against the future quantum threat, and never distribute encryption keys that can be intercepted. The Qrypt SDK allows you to generate identical keys at multiple endpoints.\nOverview Developers need familiar tools based on modern development practices. We provide an SDK that can be easily integrated into applications and infrastructure to make them quantum-secure.\nThe Qrypt SDK includes client library SDKs, cloud-based REST services, command line clients and guidance to help integrate post-quantum security into your applications and services. You can add security features to your applications without being an expert in post-quantum cryptography.\nThis service requires an access token. Follow the steps in Getting Started to obtain an access token.\nQuickstarts Demo applications built using Qrypt\u0026rsquo;s tools.\nAPI Reference Detailed API References for a growing list of plaforms.\nChangelogs Release notes and updates\n"
},
{
	"uri": "https://QryptInc.github.io/eaas/nist/",
	"title": "NIST Entropy Quality Tests",
	"tags": [],
	"description": "",
	"content": "Using Qrypt\u0026rsquo;s NIST Entropy Quality Tests Qrypt’s NIST Entropy Quality Tests is a set of APIs that allows you to check the quality of Qrypt\u0026rsquo;s entropy using the NIST Statistical Test Suite. Tests are conducted every 10 minutes against Qrypt\u0026rsquo;s Quantum Entropy service. Accessing this service does not require a Qrypt account or access token.\nAbout NIST Entropy Quality Tests The NIST Entropy Quality Test suite uses the 15 statistical tests defined by the NIST Statistical Test Suite (STS). Each of these 15 tests is repeated over many samples. The APIs generate two test results:\nTotal number of individual passing tests: considered successful if a sufficient number of individual tests pass. The threshold varies based on the number of individual tests run and is based on an alpha value of 0.01. For example, 1000 individual tests requires a 98% pass rate to be considered successful. P-value uniformity for each of the 15 tests: considered successful if all 15 tests have uniformly distributed p-values. The tests are considered as succeeding overall if either of these criteria are met. This provides a metric for passing that is more robust to fluctuations than using either criterion alone. However, this standard does not catch certain randomness defects. For example, if the randomness was periodic with a period equal to the size used for batching, a sufficiently high portion of the tests might pass, but the P-values would not be uniform.\nNIST Entropy Quality Test Endpoints There are three endpoints for obtaining NIST entropy quality test results.\nNIST Logs: retrieves a specified number of recent test results Failing NIST Logs: retrieves a specified number of recent failing test results Failing NIST Random: retrieves random of recent failing tests NIST Logs This API contains the most recent NIST test results. To get NIST test results, you must submit an HTTP request to the API, optionally providing the number of results to view and whether they should be shown in a simplified format.\nMake a request to the following URL: https://nist.qrypt.com/api/v1/logs?num={num}\u0026amp;simple={simple}. Optionally replace {num} with the desired number of recent test results to show. Optionally replace {simple} with a true or false to specify if you want a simplified test result output. Request Parameters Request Fields Description num Optional. The number of logs to show. Can be set between 1 and 100, defaulting to 5. simple Optional. Format the logs in a summarized manner, only showing the 'tests_passed', 'time_of_completion' and 'time_of_completion_string' fields. Can be set to 'true' or 'false', defaulting to 'false'. Response Codes Status code Description 200 Success\nTest results were successfully retrieved. 400 Bad request\nThe request was invalid (i.e., malformed or otherwise unacceptable). Please verify the format of the URL and the specified parameters. 500 Internal server error\nThe Qrypt service has encountered an internal error. Please contact Qrypt support for further assistance. 503 Service Unavailable\nPlease wait and try the request again. JSON Response Fields For a successful 200 response, the response contains a JSON-encoded structure with an array of test results with the following fields in each array element. Note that the simplified logs only contain \u0026rsquo;tests_passed\u0026rsquo;, \u0026rsquo;time_of_completion\u0026rsquo; and \u0026rsquo;time_of_completion_string\u0026rsquo; fields.\nThere are two main groupings of tests. One is prefixed \u0026rsquo;nist\u0026rsquo; for the number of NIST STS tests that passed or failed, and the second is \u0026lsquo;uniformity\u0026rsquo; for the uniformity of each NIST STS test\u0026rsquo;s P-values.\nJSON Response Fields Description tests_passed If tests passed overall. This indicates either 'nist_all_passed' or 'uniformity_all_passed' is true. time_of_completion Unix timestamp of when the test was completed. time_of_completion_string String timestamp of when the test was completed. nist_all_passed If a sufficiently large percentage of NIST STS tests succeeded. nist_fails Number of NIST STS test failures. nist_passes Number of NIST STS test passes. nist_success_rate NIST STS test success rate. uniformity_all_passed If the P-values of all NIST STS tests are uniformly distributed. uniformity_fails Number of NIST STS tests with non-uniformly distributed P-values. uniformity_passes Number of NIST STS tests with uniformly distributed P-values. uniformity_success_rate NIST STS test uniformity success rate. The following illustrates an example of JSON output as returned by a request for a single log:\n[ { \u0026#34;nist_all_passed\u0026#34;: true, \u0026#34;nist_fails\u0026#34;: 86, \u0026#34;nist_passes\u0026#34;: 8742, \u0026#34;nist_success_rate\u0026#34;: 0.9855783640783642, \u0026#34;tests_passed\u0026#34;: true, \u0026#34;time_of_completion\u0026#34;: 1699551247.1653655, \u0026#34;time_of_completion_string\u0026#34;: \u0026#34;11/09/2023 12:34\u0026#34;, \u0026#34;uniformity_all_passed\u0026#34;: true, \u0026#34;uniformity_fails\u0026#34;: 0, \u0026#34;uniformity_passes\u0026#34;: 15, \u0026#34;uniformity_success_rate\u0026#34;: 1.0 } ] NIST Failed Test Logs This API contains the most recent failed NIST test results, where both the individual test rate and uniformity tests fail. To get failed NIST test results, you must submit an HTTP request to the API.\nMake a request to the following URL: https://nist.qrypt.com/api/v1/failing_logs?num={num}\u0026amp;simple={simple}\u0026amp;strict={strict}\u0026amp;include_random={include_random}\u0026amp;randsize={randsize} Optionally replace {num} with the number of recent test results to show. Optionally replace {simple} with \u0026rsquo;true\u0026rsquo; to output simplified logs. Optionally replace {strict} with \u0026lsquo;false\u0026rsquo; specify if you want to show logs that failed either the test rate or uniformity. Optionally replace {include_random} with \u0026rsquo;true\u0026rsquo; to see failed random. Only applicable if \u0026lsquo;strict\u0026rsquo; is \u0026rsquo;true\u0026rsquo;. Optionally replace {randsize} with the number of bits to show. Only applicable if \u0026lsquo;include_random\u0026rsquo; is set to \u0026rsquo;true\u0026rsquo;. Request Parameters Request Fields Description num Optional integer. The number of logs to show. Can be set between 1 and 100, defaulting to 5. simple Optional boolean. Format the logs in a condensed, summarized manner. Can be set to 'true' or 'false', defaulting to 'false'. strict Optional boolean. Require that the logs must fail uniformity and test rate to be considered failing. Can be set to 'true' or 'false', defaulting to 'true'. include_random Optional boolean. Determines if the random that failed the test will be included in the response. Only applicable when \"strict\" is true. Can be set to 'true' or 'false', defaulting to 'false'. randsize Optional integer. How many bits of random to include in the response. Can be set between 1 and 5242880 (640KiB), defaulting to 1024. Only applicable when \"include_random\" is true. Response Codes Status code Description 200 Success\nTest results were successfully retrieved. 400 Bad request\nThe request was invalid (i.e., malformed or otherwise unacceptable). Please verify the format of the URL and the specified parameters. 500 Internal server error\nThe Qrypt service has encountered an internal error. Please contact Qrypt support for further assistance. 503 Service Unavailable\nPlease wait and try the request again. JSON Response Fields The JSON response fields are identical to the NIST Logs API, except for the \u0026lsquo;random\u0026rsquo; field. The \u0026lsquo;random\u0026rsquo; field only appears if \u0026lsquo;include_random\u0026rsquo; is set to \u0026rsquo;true\u0026rsquo;.\nJSON Response Fields Description tests_passed If tests passed overall. This indicates either 'nist_all_passed' or 'uniformity_all_passed' is true. time_of_completion Unix timestamp of when the test was completed. time_of_completion_string String timestamp of when the test was completed. nist_all_passed If a sufficiently large percentage of NIST STS tests succeeded. nist_fails Number of NIST STS test failures. nist_passes Number of NIST STS test passes. nist_success_rate NIST STS test success rate. uniformity_all_passed If the P-values of all NIST STS tests are uniformly distributed. uniformity_fails Number of NIST STS tests with non-uniformly distributed P-values. uniformity_passes Number of NIST STS tests with uniformly distributed P-values. uniformity_success_rate NIST STS test uniformity success rate. random The tested random that failed. The following illustrates an example of JSON output as returned by a request for a single log:\n[ { \u0026#34;nist_all_passed\u0026#34;: true, \u0026#34;nist_fails\u0026#34;: 86, \u0026#34;nist_passes\u0026#34;: 8742, \u0026#34;nist_success_rate\u0026#34;: 0.9855783640783642, \u0026#34;tests_passed\u0026#34;: true, \u0026#34;time_of_completion\u0026#34;: 1699551247.1653655, \u0026#34;time_of_completion_string\u0026#34;: \u0026#34;11/09/2023 12:34\u0026#34;, \u0026#34;uniformity_all_passed\u0026#34;: true, \u0026#34;uniformity_fails\u0026#34;: 0, \u0026#34;uniformity_passes\u0026#34;: 15, \u0026#34;uniformity_success_rate\u0026#34;: 1.0, \u0026#34;random\u0026#34;: \u0026#34;111110100110010100001010100011\u0026#34; } ] NIST Failed Random This API contains the random of the most recent strictly failing NIST tests. To get the random of failed NIST test results, you must submit an HTTP request to the API.\nMake a request to the following URL: https://nist.qrypt.com/api/v1/failing_random?num={num}\u0026amp;randsize={randsize} Optionally replace {num} with the number of recent test results to show. Optionally replace {randsize} with \u0026rsquo;true\u0026rsquo; to output simplified logs. Request Parameters Request Fields Description num Optional integer. The number of logs to show. Can be set between 1 and 100, defaulting to 5. randsize Optional integer. Number of bits of random to include in the response. Can be set between 1 and 5242880, defaulting to 1024. Response Codes Status code Description 200 Success\nTest results were successfully retrieved. 400 Bad request\nThe request was invalid (i.e., malformed or otherwise unacceptable). Please verify the format of the URL and the specified parameters. 500 Internal server error\nThe Qrypt service has encountered an internal error. Please contact Qrypt support for further assistance. 503 Service Unavailable\nPlease wait and try the request again. JSON Response Fields JSON Response Fields Description random Failing bits of random. time_of_completion Unix timestamp of when the test was completed. createdAt Readable timestamp of when the test was completed. The following illustrates an example of JSON output as returned by a request for a single log:\n[ { \u0026#34;createdAt\u0026#34;: \u0026#34;Thu, 09 Nov 2023 12:54:06 GMT\u0026#34;, \u0026#34;random\u0026#34;: \u0026#34;111110100110010100001010100011\u0026#34;, \u0026#34;time_of_completion\u0026#34;: 1699534446.5982661 } ] "
},
{
	"uri": "https://QryptInc.github.io/sdk/quickstarts/",
	"title": "Quickstarts",
	"tags": [],
	"description": "",
	"content": "Use the Quickstarts to quickly get up and running with the Qrypt SDK.\nQrpyt SDK for C++ Quickstarts The Qrypt SDK for C++ enables developers to add post-quantum security to their applications and services.\n"
},
{
	"uri": "https://QryptInc.github.io/openssh/",
	"title": "Portable OpenSSH with Qrypt",
	"tags": [],
	"description": "",
	"content": "OpenSSH is a complete implementation of the SSH protocol (version 2) for secure remote login, command execution and file transfer. Our Qrypt modifications add a dash of quantum-secure.\nOverview Portable OpenSSH is a port of OpenBSD\u0026rsquo;s OpenSSH to most Unix-like operating systems, including Linux, OS X and Cygwin. It polyfills OpenBSD APIs that are not available elsewhere, adds sshd sandboxing for more operating systems and includes support for OS-native authentication and auditing (e.g. using PAM).\nThe Qrypt implementation of OpenSSH has been modified to provide additional security via the Qrypt Key Generation SDK. During key exchange (KEX) negotiation, the Qrypt SDK will generate an additional quantum-secure secret to be prepended to the session key hash inputs. Any conventional KEX algorithm can be enhanced by Qrypt security; a Qrypt-secured algorithm can be identified by the @qrypt.com suffix.\nThe following sections will cover the two ways of obtaining Qrypt OpenSSH; by either pulling a Docker image and creating a demo container, or building Portable OpenSSH from source and adding a version of the Qrypt SDK with a C wrapper.\nInstructions to create a demo container First, visit the Qrypt portal, make a free account, and generate a keygen token.\nSet up sshd terminal: Pull the Docker image: docker pull qryptdev001/openssh:0.1.0 Run docker container in interactive mode: docker run -it --entrypoint bash --rm --name democontainer qryptdev001/openssh:0.1.0 Paste your token into the environment: export TOKEN=\u0026lt;token\u0026gt; Run sshd: $(which sshd) -o QryptToken=$TOKEN Add the -d flag to enable verbose logging and automatically close sshd at the end of the session. Set up ssh/sftp terminal: Open a second interactive session in the running container: docker exec -it democontainer bash Paste your token into the environment: export TOKEN=\u0026lt;token\u0026gt; Run ssh or sftp: \u0026lt;ssh/sftp\u0026gt; -o QryptToken=$TOKEN sftpuser@127.0.0.1 Add the -v flag to enable verbose logging. Log into sftpuser with the password \u0026ldquo;pass\u0026rdquo; (Optional) Rebuild OpenSSH to enable hex printouts of key material and metadata `cd /root/openssh-portable` `sed -i \u0026#39;:a;N;$!ba;s/#define KEX_H\\n/#define KEX_H\\n\\n#define DEBUG_KEX\\n/g\u0026#39; kex.h` # Set DEBUG_KEX flag `make clean` `make` `make install` Run sshd, sftp, and/or ssh using the instructions above.\nInstructions to build from source Follow the instructions found in the README, under the \u0026ldquo;Build with QryptSecurityC\u0026rdquo; header. This requires the currently-unavailable QryptSecurityC deliverable (the Qrypt SDK with a C wrapper), which is still being prepared for public use. Check back here soon!\n"
},
{
	"uri": "https://QryptInc.github.io/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "",
	"content": "Use the pages in this section to dig deeper into the post-quantum technologies Qrypt has to offer.\nKey Generation Architecture Architecture used to generate cryptographic keys for data encryption without distributing encryption keys.\nKey Entropy Size Understanding total entropy size using formula and examples\nOne-Time Pad (OTP) One-Time Pads are the only known information theoretically secure way to perform symmetric encryption. Qrypt is the first in the industry to offer a way to use OTP in a practical manner.\n"
},
{
	"uri": "https://QryptInc.github.io/eaas/pkcs11/",
	"title": "Qseed",
	"tags": [],
	"description": "",
	"content": "This page covers the Qseed application architecture that downloads quantum entropy from Qrypt\u0026rsquo;s entropy service and injects it into a PKCS#11 compliant HSM (Hardware Security Modules) as seed random.\nThis service requires an access token. Follow the steps in Getting Started to obtain an access token.\nTechnology Value Many of the available HSMs use non-quantum entropy sources. Fortunately, the PKCS#11 Cryptoki interface provides a C_SeedRandom function to inject entropy into a PKCS#11 compliant HSM. Developers can inject Qrypt\u0026rsquo;s quantum entropy into a HSM using the C_SeedRandom function. As a result, HSM keys can be pseudorandomly generated from quantum entropy.\nOverview There are four components to the architecture diagram above.\nQrypt Services: Qrypt\u0026rsquo;s entropy service that can provide quantum entropy via a REST API. Qseed Application: Application that periodically retrieves entropy from Qrypt\u0026rsquo;s entropy service and injects it into an HSM via a PKCS#11 Cryptoki interface (C_SeedRandom). Cryptoki Library: A library that the HSM vendor provides that implements the PKCS#11 Cryptoki interface for their device. HSM: Cryptographic hardware or software device. Installing Qseed Application The Qseed application and steps to install it can be found here.\nQseed FAQs How do I inject entropy into multiple HSM partitions?\nThe Qseed application can only inject entropy into a single partition. In order to seed multiple partitions, you will need to start multiple instances of the Qseed application.\nWhat is the recommended amount of entropy to inject into the HSM?\nThe Qseed application injects 48 bytes by default. This is recommended for Thales Network Luna 7 HSMs.\nWhy is more entropy downloaded than injected?\nQrypt\u0026rsquo;s entropy service supports entropy download at the granularity of KiBs. Extra downloaded entropy is discarded by the Qseed application.\nHow do I authenticate with the HSM partition using the Security Officer (SO) PIN?\nThe Qseed application only support Crypto User PINs. You will need to create a Crypto User PIN for the Qseed application.\nReferences More information about the PKCS#11 Cryptoki interface can be found at Oasis PKCS#11 Specification.\n"
},
{
	"uri": "https://QryptInc.github.io/concepts/entropy-projection/",
	"title": "Key Entropy Size",
	"tags": [],
	"description": "",
	"content": "Formula Total entropy size = (Number of keys) x (Entropy size per key) Key Size (bytes) Entropy Size Per Key (bytes) 16 20 32 (size of an AES-256 key) 40 64 80 256 290 1,024 (1 KiB) 1,140 (1.11 KiB) 10,240 (10 KiB) 11,380 (11.11 KiB) 102,400 (100 KiB) 113,780 (111.11 KiB) 1,048,576 (1 MiB) 1,165,090 (1.11 MiB) 10,485,760 (10 MiB) 11,650,850 (11.1 MiB) Example 1:\nTo generate (or to sync) 100 of AES-256 keys, the entropy size will be\n100 keys x 40 bytes/key = 4,000 bytes = 3.91 KiB Example 2:\nTo generate (or to sync) 100 of 256-byte OTP keys, the entropy size will be\n100 keys x 290 bytes/key = 29,000 bytes = 28.32 KiB Example 3:\nTo generate (or to sync) 100 of AES-256 keys and 200 of 256-byte OTP keys, the entropy size will be\n( 100 keys x 40 bytes/key ) + ( 200 keys x 290 bytes/key ) = 62,000 bytes = 60.55 KiB Example 4:\nAn entropy quota of 25 MiB allows you to generate (or to sync)\n( 20 MiB / 40 bytes/key ) = ( 20,971,152 bytes / 40 bytes/key ) = 65,536 keys of 32-bytes "
},
{
	"uri": "https://QryptInc.github.io/concepts/otp/",
	"title": "One-Time Pad (OTP)",
	"tags": [],
	"description": "",
	"content": "Our Technology Qrypt offers solutions to make One-Time Pads, the only known information theoretically secure symmetric encryption algorithm, finally practical in industry.\nWhat is classical cryptographic security? A cryptographic algorithm is considered secure, when the algorithm has been around for several years, and there is still no known method to “break” the algorithm with a classical computer.\nFor example, the widely used RSA algorithm has been around since 1977 with no significant progress made on a method to break it with a classical computer.\nWhat is post-quantum security? With the age of quantum computers being on the horizon, researchers have also explored methods to break cryptography using a quantum computer. Post-quantum cryptography means that after years of research, there is still no known method to “break” the cryptography, even given a quantum computer.\nFor example, RSA, would not satisfy post-quantum security because Shor’s algorithm, an attack using a quantum computer, was discovered to break RSA in 1994. On the other hand, AES-256 is considered post-quantum because no quantum attacks have been discovered since its publication in 1998.\nA One-Time Pad cipher is when a randomly chosen key, the same length of the plaintext, is XORed with the plaintext to produce the ciphertext. If the key is truly chosen randomly, all plaintexts of the given size are equally likely to have produced the ciphertext.\nWhat is information theoretic security? One-Time Pads have been mathematically proven to be information theoretically secure, meaning there is a mathematical proof that there exist no attacks (even with a computationally unbounded adversary) that can break a One-Time Pad. On the other hand, it is possible for a “post-quantum” algorithm to be broken, if in the future, someone were to discover a quantum attack on the algorithm.\nWhy isn’t everyone using One-Time Pads? One-Time Pads are only secure if the key is truly random, and only recent quantum technology has made truly random keys possible.\nIn addition, One-Time Pads are only secure if the keys are never reused. This means we need to share a newly randomly generated key, which is the same size of the plaintext, every time we want to send a new plaintext message. This reduces the security of the One-Time Pad down to the security of the key exchange algorithm.\nBLAST Distributed Qrypt offers a novel key generation solution, which offers everlasting security.\nHow secure are key exchange algorithms? Algorithms Level of Security Drawbacks RSA, Diffie Hellman, ECDH Classical security Not post-quantum Classic McEliece, CRYSTALS-KYBER, FrodoKEM Post-quantum security Not provably secure Slow/inefficient Quantum Key Distribution (QKD): BB84, E91, B92 Information theoretically secure (dependent on accuracy of hardware) Costly Range of communication is limited Tolerance for error in cryptographic security, however, is many order of magnitude smaller than in most physical engineering scenarios making it very difficult to validate Qrypt solution Everlasting security (explained below) Assumes the user has a secure channel with a user-configurable value g out of t Qrypt servers What is everlasting security? A protocol which achieves everlasting security guarantees that an encryption is information theoretically secure, given that the initial key exchange of the seed S is not broken within a time T which we can choose (i.e. an hour). This means that an hour after the two parties exchange an initial seed S, even a computationally unbounded adversary (with access to both classical and quantum computers) cannot break the encryption.\nLevels of Security Classical security that is vulnerable to quantum computers (i.e. RSA, ECDH)\nPost quantum security that has no known algorithm that quantum computers could run to break (i.e. FrodoKEM, Crystals-Kyber)\nFor levels 1 and 2, to break the encryption, an adversary would need to:\nHarvest data between Alice and Bob Break the key exchange 3a) Everlasting security which is provably secure against an unbounded adversary after phase 1 (while the server is still accepting decryption requests), where:\nthe seed key exchange has level 1 security in phase 1 we assume g out of T servers have secure, authenticated channels with the client (where these channels use TLS) 3b) Everlasting security which is provably secure against an unbounded adversary after phase 1 (while the server is still accepting decryption requests), where:\nthe seed key exchange has level 2 security in phase 1 we assume g out of T servers have secure, authenticated channels with the client (where these channels use TLS) 3c) Everlasting security which is provably secure against an unbounded adversary after phase 1 (while the server is still accepting decryption requests), where:\nthe seed has level 2 security in phase 1 we assume g out of T servers have secure, authenticated channels with the client (where these channels use post-quantum TLS) For levels 3a, 3b, and 3c, to break the encryption, an adversary would need to:\nHarvest data between Alice and Bob Harvest data from greater than T-g server links to Alice or Bob Break the key exchange of the seed Break the protocol for downloading random Information theoretic security that is provably secure against an unbounded adversary (which Qrypt only has the capability of doing with physical transfer of key material) "
},
{
	"uri": "https://QryptInc.github.io/sdk/api/",
	"title": "API Reference",
	"tags": [],
	"description": "",
	"content": "Detailed API References for a growing list of plaforms.\nQrypt SDK for C++ "
},
{
	"uri": "https://QryptInc.github.io/faqs/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "",
	"content": "What do I do if I forget my password?\nQrypt does not have access to your password, but you can place a request to change your password.\nNavigate to the portal at https://portal.qrypt.com and click the “Forgot password?” link. Enter the email address associated with your account and click the “Send me the link” button. Check your email for a message with further instructions. How do I change my password?\nNavigate to the portal at https://portal.qrypt.com and login to your account. Click the account icon (top-right corner) and select “Account settings.” Click the “Change password” link. Enter your original password, enter a new password, and click the “Change password” button. What should I do with my access token?\nYour access token is the mechanism by which your account will be charged for entropy data, and as such, it should be treated as secure and secret information (much as you would treat a password).\nI lost or forgot to save my access token. How can I retrieve it?\nTo increase security, Qrypt only displays access tokens when they are first generated. If you have lost your token, you can contact Qrypt sales support at support@qrypt.com or generate a new one.\nWhat happens if my access token expires?\nAfter an access token expires, any quantum entropy service requests using that token will return an error code of 401. After an access token expires, any key generation SDK calls using that token will thow a CannotDownload exception. You will need to generate a new token and use it for future quantum entropy requests or key generation SDK calls.\nWhat happens if I have exceeded my monthly entropy quota?\nOnce the monthly entropy quota has been reached, quantum entropy service requests will return an error code of 403. Once the monthly entropy quota has been reached, key generation SDK calls will thow a CannotDownload exception. Please contact Qrypt sales support at support@qrypt.com.\nI need more entropy bytes per month than my current quota provides.\nTo increase your quota of entropy bytes you can generate per month, either upgrade from your free account to a paid account or contact Qrypt sales support at support@qrypt.com.\nWhen does my entropy quota reset?\nYour quota is reset monthly on the day of the month on which you opened the account.\nHow is quantum entropy different from rand, urand, grand, and other pseudorandom number generators?\nThe generation of random and pseudorandom numbers is too large a topic to be covered thoroughly here, but the concepts are quite simple. There exist quantum behaviors that are completely random and unpredictable according to the laws of physics. By using a device called a homodyne laser interferometer—which can detect such quantum behaviors—Qrypt can generate and provide sequences of truly random data.\nHow can I delete my Qrypt account?\nWe do not currently support online cancellation of accounts. Please contact Qrypt Sales Support at support@qrypt.com to delete your account.\n"
},
{
	"uri": "https://QryptInc.github.io/sdk/changelogs/",
	"title": "Changelogs",
	"tags": [],
	"description": "",
	"content": "Versions SDK v0.11.22 SDK v0.11.19 SDK v0.11.14 SDK v0.11.6 SDK v0.10.2 SDK v0.9.2 SDK v0.8.6 SDK v0.7.10 SDK v0.7.4 SDK v0.6.4 SDK v0.11.22 Notable Changes:\nUpdating internal testing interfaces SDK v0.11.19 Notable Changes:\nUpgrading SDK build from Ubuntu 20.04 to Ubuntu 22.04 Upgrading SDK build from gcc 9.4.0 to gcc 11.4.0 SDK v0.11.14 Notable Changes:\nUpgrading OpenSSL dependency to 3.1.4 and libcurl dependency to 8.2.1 Fixing verification for corrupted metadata SDK v0.11.6 Notable Changes:\nThis release contains breaking API changes\nUpdating metadata schema (no longer compatible with previous versions) Adding public HTTPS client interface Upgrading to C++ 17 Upgrading OpenSSL dependency to 1.1.1v and flatbuffers dependency to 23.5.26 SDK v0.10.2 Notable Changes:\nThis release contains breaking API changes\nSimplify keygen genInit API to use key sizes and remove key mode Add customizable TTL in genInit Upgrade OpenSSL dependency to 1.1.1t and libcurl dependency to 8.0.0 SDK v0.9.2 Notable Changes:\nChange backend to use sequential sampling and seedless extraction Change smallest allowed key size to 1 byte Simplify logging API SDK v0.8.6 Notable Changes:\nMove exceptions to QryptSecurity namespace Rename log level enumerations Update metadata schema Reduce library binary size SDK v0.7.10 Notable Changes:\nAdd chunk multi-threading for genInit and genSync Increase maximum supported OTP size to 10MB SDK v0.7.4 Notable Changes:\nImprove sample retry logic for genInit and genSync Increase maximum supported OTP size to 512KB Update metadata schema SDK v0.6.4 Notable Changes:\nInitial baseline of the SDK "
},
{
	"uri": "https://QryptInc.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://QryptInc.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
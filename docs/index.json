[
{
	"uri": "https://QryptInc.github.io/eaas/",
	"title": "Entropy as a Service",
	"tags": [],
	"description": "",
	"content": "Using Qrypt Entropy as a Service Qrypt’s Entropy as a Service is a RESTful web service that allows you to generate random data (henceforth referred to as entropy or random) that is truly random—based on quantum-mechanical phenomena.\nGetting Started To start using Qrypt Entropy as a Service, you need to create a Qrypt account, obtain an access token, and submit an HTTP request.\nCreate a free Qrypt account To request entropy from the service, you must first create an account.\nNavigate to https://portal.qrypt.com and create a new account.\nEnter your email address and a strong password, then click the button to create your account.\nCheck your email for the 4-digit account confirmation code and enter it on the website to confirm your account.\nWhen prompted, enter your first and last name.\nGenerate an access token An access token is required to submit REST API requests.\nNavigate to the Tokens page.\nAssign a name to the token to help you distinguish between different tokens.\nSelect the expiration period. This determines when the token will expire and need to be replaced.\nClick the “Generate token” button.\nThe generated token will be displayed along with an example of how entropy data can be requested. Copy the token using the “Copy” button and store it in a secure location. Important: This is the only time you will be able to view the access token. Be sure to copy and store it before closing this popup.\nSave the access token to a secure location. Because your access token is used to make requests for entropy—a budgeted resource—it should be treated as secure data, very much like a password.\nSubmit a request for entropy To get entropy from the service, you must submit an HTTP request to the REST API service, providing the aforementioned access token and specifying the number of 1,024-byte blocks of entropy you would like to receive. You must also specify an access token—which identifies the user account requesting the data—in an HTTP “authorization” header. The data is returned in a JSON-encoded structure containing an array of base64-encoded strings, each of which decodes to a 1,024-byte block of entropy, as well as an integer specifying the number of strings in the array.\nTo ensure the privacy of your access token and the entropy data, all calls are made using an encrypted HTTPS connection.\nFollow these steps in your preferred tool or language of choice to request entropy (see subsequent sections Request and Response for details):\nSpecify your access token and the desired number of kibibytes (1,024 bytes) of entropy in a web request. Use the following URL: https://api-eus.qrypt.com/api/v1/quantum-entropy?size={kib_entropy}\nReplace {kib_entropy} in the aforementioned URL with an integer indicating the number of kibibytes of entropy to return.\nInclude an HTTP “Accept” header field with a value of “application/json”.\nInclude an HTTP “Authorization” header with a value of “Bearer {access_token}”, where {access_token} is the access token obtained from the Qrypt portal.\nSubmit the HTTP request using the HTTP GET method.\nIf the HTTP request is successful, the JSON-formatted response will contain a structure containing two fields named “random” and “size”. The “random” field contains an array of base64-encoded strings (each of which—when decoded—contains 1,024 bytes of entropy). The “size” field contains the number of elements in the “random” field.\nThe following sections provide more detailed explanations of the request and response.\nRequest The web service consists of one REST API call, which returns the entropy. The following table describes the properties of a valid REST API call.\nHTTP Verb GET URL https://api-eus.qrypt.com/api/v1/quantum-entropy?size={kib_entropy} {kib_entropy} is an integer that specifies the number of kibibytes (1,024 bytes) of entropy being requested. The minimum value is 1 and the maximum value is 512. If unspecified, the default value is one (1). Accept(header) \"application/json\" Authorization(header) \"Bearer {qrypt_access_token}\" {qrypt_access_token} is an access token generated in the Qrypt portal. Qrypt’s EaaS is hosted in several locations worldwide. This allows you to access a server that is closer to the client for better reliability and response time. The following table (Table 2) indicates which subdomain to use in your URL to access the server located in the specified region.\nSubdomain Geographic location api-eus Eastern United States api-weu Western Europe Response The response from the HTTP request will contain a numeric status code indicating whether or not the request succeeded and, if not, why. If successful, it will also return the entropy.\nStatus code Description 200 SuccessEntropy was successfully returned. 400 Bad requestThe request was invalid (i.e., malformed or otherwise unacceptable). Please verify the format of the URL and the specified parameters. 401 UnauthorizedThe access token is either invalid or has expired. 403 Limit reachedThe account associated with the specified access token has already retrieved the maximum allotment of entropy allowed for the current period. Please contact a Qrypt representative to request a change to your limit. 429 Rate Limit reachedThe access token used to pull random has exceeded the maximum number of requests (30) allowed for the designated time interval (10 seconds). Please wait and try again. 500 Internal server errorThe Qrypt service has encountered an internal error. Please contact Qrypt support for further assistance. 503 Not enough supplyQrypt’s supply of entropy is temporarily insufficient to fulfill the request. Please wait and try the request again. If a success status code of 200 was returned, the response contains a JSON-encoded structure containing an array size (which should match the kib_entropy value specified in the request) and an array of base64-encoded strings which, when decoded, contains 1,024 bytes of entropy.\nJSON Fields Description random An array of base64-encoded strings (as defined in RFC 4648 §4, Base 64 Encoding) . The length of the array is specified in the size field (below). Each string, when decoded, contains a 1,024-byte sequence of entropy. size The number of base64-encoded strings in the array returned in the random field (above). The following illustrates an example of JSON output as returned by a request for two 1,024-byte blocks of entropy:\n\u0026#34;random\u0026#34;: [ \u0026#34;\u0026lt;base64 encoding of 1,024 bytes of entropy\u0026gt;\u0026#34;, \u0026#34;\u0026lt;base64 encoding of 1,024 bytes of entropy\u0026gt;\u0026#34; ], \u0026#34;size\u0026#34;: 2 Examples The following examples demonstrate how to submit a request and display the returned entropy. In the following examples, {subdomain} should be replaced with the subdomain for a server in the geographic location you would like to use (see Table 2), {kib_entropy} should be replaced with an integer between 1 and 512, and {qrypt_access_token} should be replaced with an access token generated using your Qrypt account.\nCurl The following shows an example of how to submit a request for {kib_entropy} kibibytes of entropy using the {qrypt_access_token} via the curl command-line command. This command can be executed at a Windows or Unix command prompt.\ncurl https://{subdomain}.qrypt.com/api/v1/quantum-entropy?size={kib_entropy} -H \u0026quot;Authorization: Bearer {qrypt_access_token}\u0026quot;\nPowerShell The following shows an example of how to submit a request for {kib_entropy} kibibytes of data using the {qrypt_access_token} in PowerShell.\n# Specify entropy token, requested size of entropy, and subdomain\n[string] $accesstoken = '{qrypt_access_token}'\n[int] $kibData = {kib_entropy}\n[string] $sub = '{subdomain}'\n# Define the request URL\n[string] $url = \u0026quot;https://$sub.qrypt.com/api/v1/quantum-entropy?size=$kibData\u0026quot;\n# Define and submit the request\n$response = Invoke-RestMethod -Method Get -Uri $url -UseBasicParsing `-Headers @{ authorization = \u0026quot;Bearer $accesstoken\u0026quot; } ` -ContentType 'application/json' # Display the entropy bytes\nresponse.random | foreach { [Convert]::FromBase64String($_) }\nPython The following shows an example of how to submit a request for {kib_entropy} kibibytes of data using the {qrypt_access_token} in Python.\nYou may need to install the “requests” module before executing this example. For example, use the following command: python -m pip install requests\nimport requests import base64 # Specify entropy token, requeststed size of entropy, and subdomain accesstoken = \u0026#39;{qrypt_access_token}\u0026#39; kibData = {kib_entropy} sub = \u0026#39;{subdomain}\u0026#39; # Define the request URL url = f\u0026#39;https://{sub}.qrypt.com/api/v1/quantum-entropy\u0026#39; # Define and submit the request headers = { \u0026#39;Authorization\u0026#39;: f\u0026#39;Bearer {accesstoken}\u0026#39; } params = { \u0026#39;size\u0026#39;: kibData } response = requests.get( url, headers=headers, params=params) # Display the entropy bytes for s in response.json()[\u0026#39;random\u0026#39;]: for b in base64.decodebytes( s.encode(\u0026#39;ascii\u0026#39;) ): print( f\u0026#39;{b}\u0026#39;) JavaScript The following shows an example of how to submit a request for {kib_entropy} kibibytes of data using the {qrypt_access_token} in JavaScript.\n\u0026#34;use strict\u0026#34; // Specfify entropy token, requested size of entropy, and subdomain let accesstoken = \u0026#39;{qrypt_access_token}\u0026#39; let kibData = {kib_entropy} let sub = \u0026#39;{subdomain}\u0026#39; // Define the request URL let url = `https://${sub}.qrypt.com/api/v1/quantum-entropy?size=${kibData}` // Submit the request and process the response fetch(url, { method: \u0026#39;GET\u0026#39;, headers: { \u0026#39;Accept\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;: \u0026#34;Bearer \u0026#34; + accesstoken }, }) .then( response =\u0026gt; response.json() ) .then( function ( json ) { // Display the entropy bytes json.random.forEach( b64 =\u0026gt; [...( atob( b64 ))].forEach( c =\u0026gt; console.log( c.charCodeAt( 0 ))) )}) "
},
{
	"uri": "https://QryptInc.github.io/eaas/faqs/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "",
	"content": "What should I do with my access token?\nYour access token is the mechanism by which your account will be charged for entropy data, and as such, it should be treated as secure and secret information (much as you would treat a password).\nOnce I receive the EaaS response, how do I obtain entropy from it?\nThe EaaS service response is encoded as a JSON structure. Its “random” property will contain an array of base64-encoded strings. The “size” property specifies the length of the array, which should be the same as the size that was specified in the request (i.e., the number of kibibytes of entropy).\nEach base64-encoded string can be decoded to 1,024 bytes of entropy. When all base64-encoded strings are decoded, the concatenation of all decoded bytes comprises the total requested entropy.\nWhat do I do if I forget my password?\nQrypt does not have access to your password, but you can place a request to change your password.\nNavigate to the portal at https://portal.qrypt.com/login and click the “Forgot password?” link.\nEnter the email address associated with your account and click the “Send me the link” button.\nCheck your email for a message with further instructions.\nHow do I change my password?\nNavigate to the portal at https://portal.qrypt.com/login and login to your account.\nClick the account icon (top-right corner) and select “Account settings.”\nClick the “Change password” link.\nEnter your original password, enter a new password, and click the “Change password” button.\nHow do I request a new access token?\nSee section “Generate an access token” for instructions on how to request a new access token.\nI lost or forgot to save my access token. How can I retrieve it?\nTo increase security, Qrypt only displays access tokens when they are first generated. If you have lost your token, you can contact Qrypt sales support at support@qrypt.com or generate a new one.\nWhat happens if I have exceeded my monthly entropy quota?\nIf a request is made after the monthly entropy quota has been reached, the service request will return an error code of 403. Please contact Qrypt sales support at support@qrypt.com.\nI need more entropy bytes per month than my current quota provides.\nTo increase your quota of entropy bytes you can generate per month, either upgrade from your free account to a paid account or contact Qrypt sales support at support@qrypt.com.\nWhen does my entropy quota reset?\nYour quota is reset monthly on the day of the month on which you opened the account.\nWhat happens if my access token expires?\nAfter an access token expires, any requests for entropy using that token will return an error code of 401. You will need to generate a new token and use it for future entropy requests.\nHow is quantum entropy different from rand, urand, grand, and other pseudorandom number generators?\nThe generation of random and pseudorandom numbers is too large a topic to be covered thoroughly here, but the concepts are quite simple. There exist quantum behaviors that are completely random and unpredictable according to the laws of physics. By using a device called a homodyne laser interferometer—which can detect such quantum behaviors—Qrypt can generate and provide sequences of truly random data.\nHow can I delete my Qrypt account?\nWe do not currently support online cancellation of accounts. Please contact Qrypt Sales Support at support@qrypt.com to delete your account.\nI am receiving an error response code from the Qrypt service. How do I identify the problem?\nThe web service returns a status code with each response. This status code should indicate the cause of the failure. In addition to the standard HTTP error codes, the service may also return a Qrypt-specific error code, as detailed in the following table.\nStatus code Explanation and possible remediation 400 The request was invalid. Verify that the request is using the correct access token and URL, and that the requested entropy size specified in the URL is between 1 and 512. 401 Your token is invalid or has expired. Ensure the access token being used is valid or obtain a new valid token. 403 The request has exceeded your monthly entropy quota. 429 You have exceeded the maximum number of requests (30) for the given time interval (10 seconds) with your access token. 500 The Qrypt server is experiencing issues. Please try again later. If the problem persists, please contact Qrypt Technical Support. 503 The Qrypt entropy supply is low. Please try again later. If the problem persists, please contact Qrypt Technical Support. "
},
{
	"uri": "https://QryptInc.github.io/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": " Qrypt Documentation Our documentation is written by developers for developers. The goal is to make it as easy as possible for developers to use Qrypt to secure applications and infrastructure.\nWe believe that documentation benefits from sharing and collaborative improvement. Qrypt documentation is available on Github pages and we invite anybody to make changes or to create issues when there is content that needs to be improved.\nIntegrating with Qrypt Below is a list of the products that Qrypt offers with links to their supporting documentation.\nEntropy - Docs Qrypt Entropy as a Service (EaaS) measures quantum effects and converts those measurements into pure random numbers. EaaS leverages multiple Quantum Random Number Generators (QRNGs) developed by national and international research labs to ensure the highest quality random.\nKey Generation - Docs Qrypt SDK includes client library SDKs, cloud-based REST services, command line clients and guidance to help integrate post-quantum security into your applications and services. You can add security features to your applications without being an expert in post-quantum cryptography.\nQDARA - Quantum data at rest algorithm - Docs Our quantum secure data-at-rest command line tool is powered by our patented BLAST algorithm, which leverages quantum random number generation from our Entropy as a Service to produce perfectly random one-time pads. Alice can quickly and easily encrypt sensitive files with quantum random generated one-time pads. Bob must have the same pad in order to decrypt the data to read the files, ensuring important information is kept secret.\n"
},
{
	"uri": "https://QryptInc.github.io/sdk/quickstarts/cpp/",
	"title": "Qrypt SDK for C++ Quickstarts",
	"tags": [],
	"description": "",
	"content": "The Qrypt SDK for C++ enables developers to add post-quantum security to their applications and services.\nCurrently we provide Distributed Key Generation.\nLibrary Compatibility\nThe Qrypt SDK for C++ is built using the following compilers.\nPlatform Version Compiler CPU Ubuntu 20.04 gcc 9.4.0 x64 Sample Code Find the finalized code for these quickstarts on GitHub.\nPrerequisites A Qrypt Account. Create an account for free. Quickstarts Distributed key generation. Generate One-Time Pads. Encrypt and decrypt using generated One-Time Pads. "
},
{
	"uri": "https://QryptInc.github.io/sdk/api/cpp/",
	"title": "Qrypt SDK for C++",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "https://QryptInc.github.io/sdk/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "Developers need familiar tools based on modern development practices. We provide an SDK that can be easily integrated into applications and infrastructure to make them quantum-secure.\nThe Qrypt SDK includes client library SDKs, cloud-based REST services, command line clients and guidance to help integrate post-quantum security into your applications and services. You can add security features to your applications without being an expert in post-quantum cryptography.\nQrypt SDK for C++ Features\ndistributed key generation Release Notes\nQrypt Security SDK v0.6 is not backwards compatible with previous releases. Library Compatibility\nThe C++ SDK is built using the following compilers.\nPlatform Version Compiler CPU Ubuntu 20.04 gcc 9.4.0 x64 "
},
{
	"uri": "https://QryptInc.github.io/sdk/concepts/blast-distributed-multiple-endpoints/",
	"title": "BLAST Distributed - multiple endpoints",
	"tags": [],
	"description": "",
	"content": "Key distribution based on asymmetric algorithms is a weak link for cryptography.\nQrypt is the only company that enables encryption without distributing encryption keys – also basing them on trusted quantum random numbers.\nThe BLAST architecture enables generation of identical keys at multiple endpoints, so they are never distributed. Caches of random allow for sampling by multiple clients – with time and usage controls that trigger cache shredding. Client locally extracts keys from returned random – not even Qrypt can determine the keys. No dedicated channels or infrastructure required – unlike quantum key distribution (QKD). Walk-through\nClient A determines the key generation requirements: BLAST servers to be used, the sampling seeds, and extraction parameters​. Clients share the key generation requirements – seeds, extraction parameters​. Each client independently samples BLAST APIs, assembling identical blocks of random on each client.​ Clients locally extracts keys - resulting in identical encryption keys which were never distributed​ ​Attack scenarios required to compromise keys are extreme​\nAttacker compromises the A to B channel and decrypts the key generation requirements before the server caches are shredded and can no longer be sampled. Even with a quantum computer the time to decrypt is too long.​ Attacker compromises ALL aspects of the BLAST protocol, including TLS crypto​ Compromises ALL channels between a client and the N BLAST servers​ Compromises the A to B channel​ Defeat TLS cryptography used in A to B channel​ Full control of Client A or Client B​ "
},
{
	"uri": "https://QryptInc.github.io/sdk/",
	"title": "Key Generation",
	"tags": [],
	"description": "",
	"content": "Businesses need to protect against the future quantum threat, and never distribute encryption keys that can be intercepted. The Qrypt SDK allows you to generate identical keys at multiple endpoints.\nOverview Quickstarts Concepts API Reference Changelogs "
},
{
	"uri": "https://QryptInc.github.io/data_at_rest/",
	"title": "Data at Rest",
	"tags": [],
	"description": "",
	"content": "Getting Started with the Data at Rest Client In the following guide, we will help you get started with encrypting your data with a One Time Pad using the Qrypt Data at Rest Algorithm (QDARA) client. This guide will show you how to encrypt a file containing the message “Hello World”. For more detailed instruction on using the command line interface, please reference our QDARA Reference Guide.\nFor decryption, there are two use cases:\nA user can encrypt and decrypt files on a single device.\nAlice physically transfers her quantum random and cache file to Bob. Alice encrypts data and sends it to Bob over the internet, and Bob decrypts.\nBefore you get started Follow the instructions at https://www.qrypt.com/docs/eaas to\nCreate a free Qrypt account\nGenerate an access token.\nDownload the QDARA client for the OS you are running at https://portal.qrypt.com/ into a folder of your choice. To verify you downloaded the correct .zip file, you can check that the SHA256 Hash matches the one listed on the Download page.\nFor MacOS and Linux, to compute the hash, run\nshasum -a 256 qdaracl-\u0026lt;version-os\u0026gt;.zip\nNote that to verify the zip file for MacOS, you must choose to “Save file” because MacOS will automatically extract the file if you choose to open it.\nFor Windows, to compute the hash, run\ncertUtil -hashfile qdaracl-.zip SHA256\n(Optional) Add installation folder to your PATH environment variable For MacOS and Linux, edit your .bashrc or .zshrc file and add the line\nexport PATH=$PATH:\u0026lt;insert installation folder path here\u0026gt;\nFor Windows, open the start menu and search for “Edit environment variables”. Click on the “Path” variable and click “edit.” Add a new path for the folder containing the QDARA client.\nClose your terminal, and test that you can run the tool by running\nqdaracl -h\nDownload Quantum Random for your Key You will need your access token generated from the Qrypt portal. To download 2 KB of random, run\nqdaracl download -t \u0026lt;insert token here\u0026gt; -s 2 -o key.qrand\nThis will store 2 KB of quantum random into key.qrand. Note that you need at least as much random as the size of your plaintext file, and a minimum of 2 KB of random to encrypt any file.\nInitiate the client encryption tool qdaracl init -i key.qrand -o my_cache.qcache\nThis will generate a cache file that stores metadata about how much of the random has been used. Note that it is the user’s responsibility to store the cache file securely.\nEncrypt your data Create a plaintext file.\necho \u0026quot;Hello World\u0026quot; \u0026gt; plaintext.txt\nEncrypt the file.\nqdaracl encrypt -c my_cache.qcache -i plaintext.txt -o ciphertext.qdara\nDecrypt your data When you are ready to decrypt, you can simply run\nqdaracl decrypt -c my_cache.qcache -i ciphertext.qdara -o new_plaintext.txt\nNote that if you are a user on a different device, you must physically obtain my_cache.qcache and key.qrand from the original encryptor.\nEncrypt more files To encrypt larger size files, you may need to download more random! Here is a table of the minimum amount of random you need for a given plaintext size.\nPlaintext Size Minimum Random Size in Cache 1 KB 5 KB 10 KB 27 KB 100 KB 218 KB 1 MB 2103 KB (\u0026gt; 2 MB) 2 MB 4173 KB (\u0026gt; 4 MB) 4 MB 8301 KB (\u0026gt;8 MB) "
},
{
	"uri": "https://QryptInc.github.io/sdk/quickstarts/",
	"title": "Quickstarts",
	"tags": [],
	"description": "",
	"content": "Use the Quickstarts to quickly get up and running with the Qrypt SDK.\nQrpyt SDK for C++ Quickstarts "
},
{
	"uri": "https://QryptInc.github.io/data_at_rest/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "",
	"content": "Use the pages in this section to dig deeper into the post-quantum technologies Qrypt has to offer.\nOne-Time Pad (OTP) "
},
{
	"uri": "https://QryptInc.github.io/sdk/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "",
	"content": "Use the pages in this section to dig deeper into the post-quantum technologies Qrypt has to offer.\nBLAST Distributed - multiple endpoints How to estimate the projected size of entropy? "
},
{
	"uri": "https://QryptInc.github.io/sdk/concepts/entropy-projection/",
	"title": "How to estimate the projected size of entropy?",
	"tags": [],
	"description": "",
	"content": "Formula: Total entropy size = (Number of keys) x (Entropy size per key)\nTable: Key Size (byte) Entropy Size Per Key (byte) 16 22,120 (21.6 KiB) 32 (size of an AES-256 key) 22,440 (21.9 KiB) 64 23,080 (22.5 KiB) 128 24,280 (23.7 KiB) 256 26,680 (26.1 KiB) 512 31,200 (30.5 KiB) 1,024 (1 KiB) (1.0 KB) 39,600 (38.7 KiB) 2,048 (2 KiB) (2.0 KB) 55,080 (53.8 KiB) 4,096 (4 KiB) (4.1 KB) 83,560 (81.6 KiB) 32,768 (32 KiB) (32.8 KB) 423,480 (413.6 KiB) Example 1: To generate (or to sync) 100 of AES-256 keys, the entropy size will be\n100 x 22,440 = 2,244,000 bytes = 2.1 MiB.\nExample 2: To generate (or to sync) 100 of 128-byte OTP keys, the entropy size will be\n100 x 24,280 = 2,428,000 bytes = 2.3 MiB.\nExample 3: To generate (or to sync) 100 of AES-256 keys and 200 of 128-byte OTP keys, the entropy size will be\n100 x 22,440 + 200 x 24,280 = 7,100,000 bytes = 6.8 MiB.\nExample 4: 25 MiB entropy quota allows you to generate (or to sync)\n25 * 1024 * 1024 / 22,440 = 1168 of AES-256 keys in total.\n"
},
{
	"uri": "https://QryptInc.github.io/data_at_rest/concepts/otp/",
	"title": "One-Time Pad (OTP)",
	"tags": [],
	"description": "",
	"content": "Our Technology Qrypt offers solutions to make One-Time Pads, the only known information theoretically secure symmetric encryption algorithm, finally practical in industry.\nWhat is classical cryptographic security? A cryptographic algorithm is considered secure, when the algorithm has been around for several years, and there is still no known method to “break” the algorithm with a classical computer.\nFor example, the widely used RSA algorithm has been around since 1977 with no significant progress made on a method to break it with a classical computer.\nWhat is post-quantum security? With the age of quantum computers being on the horizon, researchers have also explored methods to break cryptography using a quantum computer. Post-quantum cryptography means that after years of research, there is still no known method to “break” the cryptography, even given a quantum computer.\nFor example, RSA, would not satisfy post-quantum security because Shor’s algorithm, an attack using a quantum computer, was discovered to break RSA in 1994. On the other hand, AES-256 is considered post-quantum because no quantum attacks have been discovered since its publication in 1998.\nOne-Time Pads A One-Time Pad cipher is when a randomly chosen key, the same length of the plaintext, is XORed with the plaintext to produce the ciphertext. If the key is truly chosen randomly, all plaintexts of the given size are equally likely to have produced the ciphertext.\nWhat is information theoretic security? One-Time Pads have been mathematically proven to be information theoretically secure, meaning there is a mathematical proof that there exist no attacks (even with a computationally unbounded adversary) that can break a One-Time Pad. On the other hand, it is possible for a “post-quantum” algorithm to be broken, if in the future, someone were to discover a quantum attack on the algorithm.\nWhy isn’t everyone using One-Time Pads? One-Time Pads are only secure if the key is truly random, and only recent quantum technology has made truly random keys possible.\nIn addition, One-Time Pads are only secure if the keys are never reused. This means we need to share a newly randomly generated key, which is the same size of the plaintext, every time we want to send a new plaintext message. This reduces the security of the One-Time Pad down to the security of the key exchange algorithm.\nQrypt Data at Rest Algorithm – QDARA To encrypt data at rest, we don’t need to worry about key exchange. There will either be a single party encrypting data on their device, or multiple parties who have physically distributed a truly random string X. The use case for the QDARA client is described in Section 5.1 of the whitepaper.\nBLAST The Bounded Linearly Accessible String (BLAST) extractor (Yevgeniy Dodis and Kevin Yeo, 2021) is a cryptographic primitive that offers a stateless solution for multiple parties to extract a One-Time Pad given a truly random string X.\nGiven a pool of truly random numbers X, BLAST takes a seed S as input, and outputs a One-Time Pad R. The extracted R is indistinguishable from a randomly generated R.\nSee the whitepaper for more details about BLAST and a proof of its indistinguishability from random. Note that the whitepaper refers to BLAST as a doubly affine extractor.\nEncryption and Decryption Each encryption has three inputs: a plaintext, a key, and either an initialization vector (IV) or a seed. Decryption requires a ciphertext, the same key, and the same IV or seed to decrypt. The procedures are described in more detail in the Init, Encrypt, and Decrypt methods below.\nInit (Encryptor):\nObtain quantum random X from Qrypt and store in qrand files. Generate a seed S_AES on your machine using OpenSSL. Extract an AES-256 key and IV pair ¬K using BLAST with the seed S_AES and quantum random X and store them in the qcache file. Physically transfer qrand files and the qcache file to the decryptor. Init (Decryptor)\nPhysically obtain qrand files and qcache file from the encryptor. Note: The user is responsible for storing the qrand and qcache files securely.\nEncrypt Generate a seed SOTP and an AES-256 key and IV pair K0 on your machine from OpenSSL. Extract the One-Time Pad using the BLAST with the seed SOTP and quantum random X. Compute the ciphertext by XORing the One-Time Pad with the plaintext. Encrypt the ciphertext once more with AES-256 OCB mode to provide authentication with the seed SOTP as associated data. Encrypt SOTP and K0 using AES-256 OCB mode with the key and IV pair K in your cache file and append it to the final ciphertext. Decrypt Decrypt the seed SOTP and AES-256 key and IV pair K0 using AES-256 OCB mode with the key and IV pair K in your cache file. Decrypt the ciphertext using AES-256 OCB mode with the key and IV pair K in your cache file. Extract the One-Time Pad using BLAST with the seed SOTP and quantum random X. Compute the final plaintext by XORing the One-Time Pad with the ciphertext. Why use BLAST instead of using X directly? Having a stateless method of determining the One-Time pad from X makes it much easier for parties of 3 or more to communicate using the same random pool X. Instead of requiring all parties to keep track of an index which can easily get out of sync, it is much simpler to use a new seed for each encryption. Using BLAST also ensures that the One-Time Pad is never stored in the clear and offers additional security in case chunks of X are stolen.\nAre we reusing One-Time Pads? We keep track of the percentage of X we have used in the cache file. Once the usage exceeds a user-configurable percentage (default set to 50%) of X, the user can no longer encrypt with X unless they use the –force flag. The percentage corresponds to 1-β in the whitepaper.\nAlthough it is possible that BLAST uses the same bit twice in different encryptions, the whitepaper proves that the extracted One-Time Pad is indistinguishable from a purely random One-Time Pad as long as the total length of the One-Time Pads used is bounded by (1-β)|X|.\nWhere are the seeds stored? The seeds are encrypted with AES-256, and the encrypted seed is appended to the ciphertext. The AES key and IV are stored in the cache file.\nWhat level of security does QDARA offer? Our QDARA client offers post-quantum security. An adversary can only gain secret information if they have access to both the full random string X (by breaking TLS when the user downloads X) and the seed S (by breaking AES). Since AES is a post-quantum algorithm, the client achieves post-quantum security.\nDoes QDARA provide authentication? Yes, after the ciphertext is encrypted with the One-Time Pad, we use AES-256 OCB mode to provide authentication with the seed as associated data. If the ciphertext is tampered with, the AEAD authentication will fail.\nHow much random do I need for an encryption? This depends on the user-configurable percentage α (default set to 50%), which is the maximum amount of random you can use from a cache. There are three constraints you must fulfill to encrypt a file of size m:\nYou must have at least m bytes available to use out of the α|X| total available bytes. If you wish to encrypt a file of size m, your cache must have a total of at least bytes in order to sample the necessary size using BLAST *see whitepaper for details, note we set ϵ=2-64). Note that this refers to the total number of random bytes and is independent of the number of available random bytes. Regardless of m, you must have at least enough random to call the BLAST extractor to generate an AES key and IV (44 bytes). You can obtain this value by plugging in m=44 to the above equation. For example, to encrypt a file of 5 KB = 5120 bytes, with our depletion parameter set to α=0.5, we must:\nHave at least 5120 random bytes available. Have at least 14,890 total random bytes (obtained from plugging in m = 5120 into the equation). Since we are encrypting more than 44 bytes, this requirement is redundant. Here is a table of minimum cache sizes for reference.\nPlaintext Size Minimum Cache Size 1 KB 5 KB 10 KB 27 KB 100 KB 218 KB 1 MB 2103 KB (\u0026gt; 2 MB) 2 MB 4173 KB (\u0026gt; 4 MB) 4 MB 8301 KB (\u0026gt; 8 MB) How long does it take to encrypt? For a random pool size of 10 MB, we have the following performance numbers which were collected on a MacBook (15-inch Mid 2015).\nPlaintext Size Time (seconds) 1 KB 0.06 10 KB 0.25 100 KB 5.80 1 MB 203.12 2 MB 600.56 4 MB 1673.12 Qrypt Key Exchange Solution – BLAST Qrypt offers a novel key exchange solution, (Section 5.2 of the whitepaper) which offers everlasting security.\nHow secure are key exchange algorithms? Algorithms Level of Security Drawbacks RSA, Diffie Hellman, ECDH Classical security Not post-quantum Classic McEliece, CRYSTALS-KYBER, FrodoKEM Post-quantum security Not provably secure Slow/inefficient Quantum Key Distribution (QKD): BB84, E91, B92 Information theoretically secure (dependent on accuracy of hardware) Costly Range of communication is limited Tolerance for error in cryptographic security, however, is many order of magnitude smaller than in most physical engineering scenarios making it very difficult to validate Qrypt solution Everlasting security (explained below) Assumes the user has a secure channel with a user-configurable value g out of t Qrypt servers What is everlasting security? A protocol which achieves everlasting security guarantees that an encryption is information theoretically secure, given that the initial key exchange of the seed S is not broken within a time T which we can choose (i.e. a week). This means that a week after the two parties exchange an initial seed S, even a computationally unbounded adversary (with access to both classical and quantum computers) cannot break the encryption.\nLevels of Security Classical security that is vulnerable to quantum computers (i.e. RSA, ECDH)\nPost quantum security that has no known algorithm that quantum computers could run to break (i.e. FrodoKEM, Crystals-Kyber)\nFor levels 1 and 2, to break the encryption, an adversary would need to:\nHarvest data between Alice and Bob Break the key exchange 3a) Everlasting security which is provably secure against an unbounded adversary after phase 1 (while the server is still accepting decryption requests), where:\nthe seed key exchange has level 1 security in phase 1 we assume g out of T servers have secure, authenticated channels with the client (where these channels use TLS) 3b) Everlasting security which is provably secure against an unbounded adversary after phase 1 (while the server is still accepting decryption requests), where:\nthe seed key exchange has level 2 security in phase 1 we assume g out of T servers have secure, authenticated channels with the client (where these channels use TLS) 3c) Everlasting security which is provably secure against an unbounded adversary after phase 1 (while the server is still accepting decryption requests), where:\nthe seed has level 2 security in phase 1 we assume g out of T servers have secure, authenticated channels with the client (where these channels use post-quantum TLS) For levels 3a, 3b, and 3c, to break the encryption, an adversary would need to:\nHarvest data between Alice and Bob Harvest data from greater than T-g server links to Alice or Bob Break the key exchange of the seed Break the protocol for downloading random Information theoretic security that is provably secure against an unbounded adversary (which Qrypt only has the capability of doing with physical transfer of key material) What levels of security does Qrypt offer? Our SDK offers:\nClassical SKU for QDEA at level 1 Post-quantum SKU for QDEA, QDARA at level 2 Digital QKD (everlasting security SKU) at levels 3a and 3b Note that for an adversary to break a SKU, they must break the protocol or primitive in all 3 columns below. Level Qrypt offering Data Harvesting Key exchange for seeds/symmetric keys Protocol for downloading random Level 1 (classical) QDEA classical SKU Adversary needs to harvest data from only one network transmission ECDH (classical) N/A Level 2 (post-quantum) QDARA, QDEA post-quantum sku Adversary needs to harvest data from only one network transmission Lattice crypto (PQC) N/A Level 3a (everlasting security) Digital QKD with user-supplied channel Adversary needs to harvest data from: More than T-g transmissions from QDEA servers Key exchange of seed ECDH (classical) Classical TLS Level 3b (everlasting security) Digital QKD sample Adversary needs to harvest data from: More than T-g transmissions from QDEA servers Key exchange of seed Lattice crypto (PQC) Classical TLS Level 3c (everlasting security) -- Adversary needs to harvest data from: More than T-g transmissions from QDEA servers Key exchange of seed Lattice crypto (PQC) Post-quantum TLS Level 4 (information theoretic security) -- Adversary needs to steal physical devices Physical transfer N/A "
},
{
	"uri": "https://QryptInc.github.io/sdk/api/",
	"title": "API Reference",
	"tags": [],
	"description": "",
	"content": "Detailed API References for a growing list of plaforms.\nQrypt SDK for C++ "
},
{
	"uri": "https://QryptInc.github.io/sdk/changelogs/",
	"title": "Changelogs",
	"tags": [],
	"description": "",
	"content": "Versions SDK v0.7.10 SDK v0.7.4 SDK v0.6.4 SDK v0.7.10 Notable Changes:\nAdd chunk multi-threading for genInit and genSync Increase maximum supported OTP size to 10MB SDK v0.7.4 Notable Changes:\nImprove sample retry logic for genInit and genSync Increase maximum supported OTP size to 512KB Update metadata schema SDK v0.6.4 Notable Changes:\nInitial baseline of the SDK "
},
{
	"uri": "https://QryptInc.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://QryptInc.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
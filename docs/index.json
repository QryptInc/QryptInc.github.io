[
{
	"uri": "https://qryptinc.github.io/docs/eaas/",
	"title": "Entropy as a Service",
	"tags": [],
	"description": "",
	"content": "Using Qrypt Entropy as a Service Qrypt’s Entropy as a Service is a RESTful web service that allows you to generate random data (henceforth referred to as entropy or random) that is truly random—based on quantum-mechanical phenomena.\nGetting Started To start using Qrypt Entropy as a Service, you need to create a Qrypt account, obtain an access token, and submit an HTTP request.\nCreate a free Qrypt account To request entropy from the service, you must first create an account.\n  Navigate to https://portal.qrypt.com and select the option to create a new account.\n  Enter your email address and a strong password, then click the button to create your account.\n  Check your email for the 4-digit account confirmation code and enter it on the website to confirm your account.\n  When prompted, enter your first and last name.\n  Generate an access token An access token is required to submit REST API requests.\n  Navigate to the Tokens page.\n  Assign a name to the token to help you distinguish between different tokens.\n  Select the expiration period. This determines when the token will expire and need to be replaced.\n  Click the “Generate token” button.\n  The generated token will be displayed along with an example of how entropy data can be requested. Copy the token using the “Copy” button and store it in a secure location. Important: This is the only time you will be able to view the access token. Be sure to copy and store it before closing this popup.\n  Save the access token to a secure location. Because your access token is used to make requests for entropy—a budgeted resource—it should be treated as secure data, very much like a password.\n  Submit a request for entropy To get entropy from the service, you must submit an HTTP request to the REST API service, providing the aforementioned access token and specifying the number of 1,024-byte blocks of entropy you would like to receive. You must also specify an access token—which identifies the user account requesting the data—in an HTTP “authorization” header. The data is returned in a JSON-encoded structure containing an array of base64-encoded strings, each of which decodes to a 1,024-byte block of entropy, as well as an integer specifying the number of strings in the array.\nNote: To ensure the privacy of your access token and the entropy data, all calls are made using an encrypted HTTPS connection. Follow these steps in your preferred tool or language of choice to request entropy (see subsequent sections Request and Response for details):\n  Specify your access token and the desired number of kibibytes (1,024 bytes) of entropy in a web request. Use the following URL: https://api-eus.qrypt.com/api/v1/quantum-entropy?size={kib_entropy}\n  Replace {kib_entropy} in the aforementioned URL with an integer indicating the number of kibibytes of entropy to return.\n  Include an HTTP “Accept” header field with a value of “application/json”.\n  Include an HTTP “Authorization” header with a value of “Bearer {access_token}”, where {access_token} is the access token obtained from the Qrypt portal.\n  Submit the HTTP request using the HTTP GET method.\n  If the HTTP request is successful, the JSON-formatted response will contain a structure containing two fields named “random” and “size”. The “random” field contains an array of base64-encoded strings (each of which—when decoded—contains 1,024 bytes of entropy). The “size” field contains the number of elements in the “random” field.\n  The following sections provide more detailed explanations of the request and response.\nRequest The web service consists of one REST API call, which returns the entropy. The following table describes the properties of a valid REST API call.\n HTTP Verb GET   URL  https://api-eus.qrypt.com/api/v1/quantum-entropy?size={kib_entropy} {kib_entropy} is an integer that specifies the number of kibibytes (1,024 bytes) of entropy being requested. The minimum value is 1 and the maximum value is 512. If unspecified, the default value is one (1).    Accept(header) \"application/json\"   Authorization(header)  \"Bearer {qrypt_access_token}\" {qrypt_access_token} is an access token generated in the Qrypt portal.    Response The response from the HTTP request will contain a numeric status code indicating whether or not the request succeeded and, if not, why. If successful, it will also return the entropy.\n Status code Description   200 SuccessEntropy was successfully returned.   400 Bad requestThe request was invalid (i.e., malformed or otherwise unacceptable). Please verify the format of the URL and the specified parameters.   401 UnauthorizedThe access token is either invalid or has expired.   403 Limit reachedThe account associated with the specified access token has already retrieved the maximum allotment of entropy allowed for the current period. Please contact a Qrypt representative to request a change to your limit.   429 Rate Limit reachedThe access token used to pull random has exceeded the maximum number of requests (30) allowed for the designated time interval (10 seconds). Please wait and try again.   500 Internal server errorThe Qrypt service has encountered an internal error. Please contact Qrypt support for further assistance.   503 Not enough supplyQrypt’s supply of entropy is temporarily insufficient to fulfill the request. Please wait and try the request again.   If a success status code of 200 was returned, the response contains a JSON-encoded structure containing an array size (which should match the kib_entropy value specified in the request) and an array of base64-encoded strings which, when decoded, contains 1,024 bytes of entropy.\n JSON Fields Description   random An array of base64-encoded strings. The length of the array is specified in the size field (below). Each string, when decoded, contains a 1,024-byte sequence of entropy.   size The number of base64-encoded strings in the array returned in the random field (above).   "
},
{
	"uri": "https://qryptinc.github.io/docs/eaas/faqs/_faqs/",
	"title": "Faqs",
	"tags": [],
	"description": "",
	"content": "What should I do with my access token?\nYour access token is the mechanism by which your account will be charged for entropy data, and as such, it should be treated as secure and secret information (much as you would treat a password).\nOnce I receive the EaaS response, how do I obtain entropy from it?\nThe EaaS service response is encoded as a JSON structure. Its “random” property will contain an array of base64-encoded strings. The “size” property specifies the length of the array, which should be the same as the size that was specified in the request (i.e., the number of kibibytes of entropy).\nEach base64-encoded string can be decoded to 1,024 bytes of entropy. When all base64-encoded strings are decoded, the concatenation of all decoded bytes comprises the total requested entropy.\nWhat do I do if I forget my password?\nQrypt does not have access to your password, but you can place a request to change your password.\n  Navigate to the portal at https://portal.qrypt.com/login and click the “Forgot password?” link.\n  Enter the email address associated with your account and click the “Send me the link” button.\n  Check your email for a message with further instructions.\n  How do I change my password?\n  Navigate to the portal at https://portal.qrypt.com/login and login to your account.\n  Click the account icon (top-right corner) and select “Account settings.”\n  Click the “Change password” link.\n  Enter your original password, enter a new password, and click the “Change password” button.\n  How do I request a new access token?\nSee section “Generate an access token” for instructions on how to request a new access token.\nI lost or forgot to save my access token. How can I retrieve it?\nTo increase security, Qrypt only displays access tokens when they are first generated. If you have lost your token, you can contact Qrypt sales support at support@qrypt.com or generate a new one.\nWhat happens if I have exceeded my monthly entropy quota?\nIf a request is made after the monthly entropy quota has been reached, the service request will return an error code of 403. Please contact Qrypt sales support at support@qrypt.com.\nI need more entropy bytes per month than my current quota provides.\nTo increase your quota of entropy bytes you can generate per month, either upgrade from your free account to a paid account or contact Qrypt sales support at support@qrypt.com.\nWhen does my entropy quota reset?\nYour quota is reset monthly on the day of the month on which you opened the account.\nWhat happens if my access token expires?\nAfter an access token expires, any requests for entropy using that token will return an error code of 401. You will need to generate a new token and use it for future entropy requests.\nHow is quantum entropy different from rand, urand, grand, and other pseudorandom number generators?\nThe generation of random and pseudorandom numbers is too large a topic to be covered thoroughly here, but the concepts are quite simple. There exist quantum behaviors that are completely random and unpredictable according to the laws of physics. By using a device called a homodyne laser interferometer—which can detect such quantum behaviors—Qrypt can generate and provide sequences of truly random data.\nHow can I delete my Qrypt account?\nWe do not currently support online cancellation of accounts. Please contact Qrypt Sales Support at support@qrypt.com to delete your account.\nI am receiving an error response code from the Qrypt service. How do I identify the problem?\nThe web service returns a status code with each response. This status code should indicate the cause of the failure. In addition to the standard HTTP error codes, the service may also return a Qrypt-specific error code, as detailed in the following table.\n   Status code Explanation and possible remediation     400 The request was invalid. Verify that the request is using the correct access token and URL, and that the requested entropy size specified in the URL is between 1 and 512.   401 Your token is invalid or has expired. Ensure the access token being used is valid or obtain a new valid token.   403 The request has exceeded your monthly entropy quota.   429 You have exceeded the maximum number of requests (30) for the given time interval (10 seconds) with your access token.   500 The Qrypt server is experiencing issues. Please try again later. If the problem persists, please contact Qrypt Technical Support.   503 The Qrypt entropy supply is low. Please try again later. If the problem persists, please contact Qrypt Technical Support.    "
},
{
	"uri": "https://qryptinc.github.io/docs/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "About Documentation Entropy as a service Quantum random for everyone.\n  Streams of Quantum random numbers delivered via the cloud.\n  No expensive hardware.\n  Accessible to anyone, anywhere.\n  Quantum secure cryptography A quantum leap forward.\n  Qrypt’s patented BLAST algorithm one-time pad for the digital age.\n  Secures data at rest and in motion.\n  Secures documents, data sets, messages, and communication.\n  "
},
{
	"uri": "https://qryptinc.github.io/docs/data_at_rest/",
	"title": "Data at rest",
	"tags": [],
	"description": "",
	"content": "Getting Started with the Data at Rest Client In the following guide, we will help you get started with encrypting your data with a One Time Pad using the Qrypt Data at Rest Algorithm (QDARA) client. This guide will show you how to encrypt a file containing the message “Hello World”. For more detailed instruction on using the command line interface, please reference our QDARA Reference Guide.\nFor decryption, there are two use cases:\n  A user can encrypt and decrypt files on a single device.\n  Alice physically transfers her quantum random and cache file to Bob. Alice encrypts data and sends it to Bob over the internet, and Bob decrypts.\n  Before you get started Follow the instructions at https://www.qrypt.com/docs/eaas to\n  Create a free Qrypt account\n  Generate an access token.\n  Download the QDARA client for the OS you are running at https://portal.qrypt.com/ into a folder of your choice. To verify you downloaded the correct .zip file, you can check that the SHA256 Hash matches the one listed on the Download page.\nFor MacOS and Linux, to compute the hash, run\n shasum -a 256 qdaracl-\u0026lt;version-os\u0026gt;.zip\n Note that to verify the zip file for MacOS, you must choose to “Save file” because MacOS will automatically extract the file if you choose to open it.\nFor Windows, to compute the hash, run\ncertUtil -hashfile qdaracl-.zip SHA256(Optional) Add installation folder to your PATH environment variable For MacOS and Linux, edit your .bashrc or .zshrc file and add the line\n export PATH=$PATH:\u0026lt;insert installation folder path here\u0026gt;\n For Windows, open the start menu and search for “Edit environment variables”. Click on the “Path” variable and click “edit.” Add a new path for the folder containing the QDARA client.\nClose your terminal, and test that you can run the tool by running\n qdaracl -h\n Download Quantum Random for your Key You will need your access token generated from the Qrypt portal. To download 2 KB of random, run\n qdaracl download -t \u0026lt;insert token here\u0026gt; -s 2 -o key.qrand\n This will store 2 KB of quantum random into key.qrand. Note that you need at least as much random as the size of your plaintext file, and a minimum of 2 KB of random to encrypt any file.\nInitiate the client encryption tool  qdaracl init -i key.qrand -o my_cache.qcache\n This will generate a cache file that stores metadata about how much of the random has been used. Note that it is the user’s responsibility to store the cache file securely.\nEncrypt your data Create a plaintext file.\n echo \u0026quot;Hello World\u0026quot; \u0026gt; plaintext.txt\n Encrypt the file.\n qdaracl encrypt -c my_cache.qcache -i plaintext.txt -o ciphertext.qdara\n Decrypt your data When you are ready to decrypt, you can simply run\n qdaracl decrypt -c my_cache.qcache -i ciphertext.qdara -o new_plaintext.txt\n Note that if you are a user on a different device, you must physically obtain my_cache.qcache and key.qrand from the original encryptor.\nEncrypt more files To encrypt larger size files, you may need to download more random! Here is a table of the minimum amount of random you need for a given plaintext size.\n   Plaintext Size Minimum Random Size in Cache     1 KB 5 KB   10 KB 27 KB   100 KB 218 KB   1 MB 2103 KB (\u0026gt; 2 MB)   2 MB 4173 KB (\u0026gt; 4 MB)   4 MB 8301 KB (\u0026gt;8 MB)    "
},
{
	"uri": "https://qryptinc.github.io/docs/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://qryptinc.github.io/docs/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]